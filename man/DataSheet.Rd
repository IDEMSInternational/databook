% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_sheet.R
\docType{class}
\name{DataSheet}
\alias{DataSheet}
\title{DataSheet Class}
\format{
An R6 class object.
}
\description{
An R6 class to handle and manage a data frame with associated metadata, filters, and various settings.
}
\note{
Be cautious when replacing existing calculations, as the new calculation will
overwrite the previous one without confirmation.
Merge New Data with Existing Data
}
\section{Methods}{

\describe{
\item{\code{set_data(new_data, messages, check_names)}}{Sets the data for the DataSheet object.}
\item{\code{set_changes(new_changes)}}{Sets the changes for the DataSheet object.}
\item{\code{set_filters(new_filters)}}{Sets the filters for the DataSheet object.}
\item{\code{set_column_selections(new_column_selections)}}{Sets the column selections for the DataSheet object.}
\item{\code{set_meta(new_meta)}}{Sets the metadata for the DataSheet object.}
\item{\code{clear_metadata()}}{Clears the metadata for the DataSheet object.}
\item{\code{clear_variables_metadata()}}{Clears the variables metadata for the DataSheet object.}
\item{\code{add_defaults_meta()}}{Adds default metadata to the DataSheet object.}
\item{\code{add_defaults_variables_metadata(column_names)}}{Adds default variables metadata to the DataSheet object.}
\item{\code{set_objects(new_objects)}}{Sets the objects for the DataSheet object.}
\item{\code{set_calculations(new_calculations)}}{Sets the calculations for the DataSheet object.}
\item{\code{set_keys(new_keys)}}{Sets the keys for the DataSheet object.}
\item{\code{set_comments(new_comments)}}{Sets the comments for the DataSheet object.}
\item{\code{append_to_metadata(label, value)}}{Appends to the metadata of the DataSheet object.}
\item{\code{is_metadata(label)}}{Checks if a label is in the metadata of the DataSheet object.}
\item{\code{set_data_changed(new_val)}}{Set the data_changed flag.}
\item{\code{set_variables_metadata_changed(new_val)}}{Set the variables_metadata_changed flag.}
\item{\code{set_metadata_changed(new_val)}}{Set the metadata_changed flag.}
\item{\code{set_enable_disable_undo(disable_undo)}}{Set whether undo functionality is enabled or disabled.}
\item{\code{save_state_to_undo_history()}}{Save the current state to the undo history.}
\item{\code{is_undo()}}{Check if undo functionality is currently disabled.}
\item{\code{has_undo_history()}}{Check if there are any actions available to undo.}
\item{\code{undo_last_action()}}{Undo the last action by restoring the previous state. Removes the last saved state from the undo history.}
\item{\code{redo_last_action()}}{Redo the last undone action by restoring the next state.}
\item{\code{set_scalars(new_scalars)}}{Set the scalars property.}
\item{\code{set_undo_history(new_data, attributes = list())}}{Set the undo history with memory management.}
\item{\code{get_scalars()}}{Retrieve the current scalars.}
\item{\code{get_scalar_names(as_list = FALSE, excluded_items = c(), ...)}}{Get the names of the scalars.}
\item{\code{get_scalar_value(scalar_name)}}{Retrieve the value of a specific scalar by name.}
\item{\code{add_scalar(scalar_name = "", scalar_value)}}{Add a scalar to the scalars property. Replaces an existing scalar if one with the same name already exists.}
\item{\code{get_data_frame(convert_to_character, include_hidden_columns, use_current_filter, use_column_selection, filter_name, column_selection_name, stack_data, remove_attr, retain_attr, max_cols, max_rows, drop_unused_filter_levels, start_row, start_col, ...)}}{Get the data frame with various options for filtering, column selection, and attribute handling.}
\item{\code{get_variables_metadata(data_type, convert_to_character, property, column, error_if_no_property, direct_from_attributes, use_column_selection)}}{Get the metadata for the variables in the data frame.}
\item{\code{get_column_data_types(columns)}}{Get the data types of the specified columns.}
\item{\code{get_column_labels(columns)}}{Get the labels of the specified columns.}
\item{\code{get_data_frame_label(use_current_filter)}}{Get the label of the data frame.}
\item{\code{clear_variables_metadata()}}{Clear the variables metadata.}
\item{\code{get_metadata(label, include_calculated, excluded_not_for_display)}}{Get the metadata for the data frame.}
\item{\code{get_changes()}}{Get the changes made to the data frame.}
\item{\code{get_calculations()}}{Get the calculations applied to the data frame.}
\item{\code{get_calculation_names(as_list, excluded_items)}}{Get the names of the calculations applied to the data frame.}
\item{\code{add_columns_to_data(col_name, col_data, use_col_name_as_prefix, hidden, before, adjacent_column, num_cols, require_correct_length, keep_existing_position)}}{Add new columns to the data frame.}
\item{\code{get_columns_from_data(col_names, force_as_data_frame, use_current_filter, use_column_selection, remove_labels, drop_unused_filter_levels)}}{Get the data for the specified columns.}
\item{\code{anova_tables(x_col_names, y_col_name, signif.stars, sign_level, means)}}{Generate ANOVA tables for the specified columns.}
\item{\code{cor(x_col_names, y_col_name, use, method)}}{Calculate the correlation between specified columns.}
\item{\code{rename_column_in_data(curr_col_name, new_col_name, label, type, .fn, .cols, new_column_names_df, new_labels_df, ...)}}{Renames a column in the data.}
\item{\code{remove_columns_in_data(cols, allow_delete_all)}}{Removes specified columns from the data.}
\item{\code{replace_value_in_data(col_names, rows, old_value, old_is_missing, start_value, end_value, new_value, new_is_missing, closed_start_value, closed_end_value, locf, from_last)}}{Replaces values in the specified columns and rows.}
\item{\code{paste_from_clipboard(col_names, start_row_pos, first_clip_row_is_header, clip_board_text)}}{Pastes data from the clipboard into the specified columns and rows.}
\item{\code{append_to_metadata(property, new_value)}}{Appends a new value to the metadata of the data.}
\item{\code{append_to_variables_metadata(col_names, property, new_val)}}{Appends a new value to the variables metadata.}
\item{\code{append_to_changes(value)}}{Appends a value to the changes list.}
\item{\code{is_metadata(str)}}{Checks if a string is in the metadata.}
\item{\code{is_variables_metadata(str, col, return_vector)}}{Checks if a string is in the variables metadata.}
\item{\code{add_defaults_meta()}}{Adds default values to the metadata.}
\item{\code{add_defaults_variables_metadata(column_names)}}{Adds default values to the variables metadata for the specified columns.}
\item{\code{remove_rows_in_data(row_names)}}{Removes the specified rows from the data.}
\item{\code{get_next_default_column_name(prefix)}}{Gets the next default column name based on the given prefix.}
\item{\code{reorder_columns_in_data(col_order)}}{Reorders the columns in the data based on the given order.}
\item{\code{insert_row_in_data(start_row, row_data, number_rows, before)}}{Inserts new rows into the data at the specified position.}
\item{\code{get_data_frame_length(use_current_filter)}}{Gets the length of the data frame.}
\item{\code{get_factor_data_frame(col_name, include_levels, include_NA_level)}}{Gets the data frame for a factor column with optional inclusion of levels and NA level.}
\item{\code{get_column_factor_levels(col_name)}}{Gets the factor levels for the specified column.}
\item{\code{sort_dataframe(col_names, decreasing, na.last, by_row_names, row_names_as_numeric)}}{Sorts the data frame based on the specified columns.}
\item{\code{convert_column_to_type(col_names, to_type, factor_values, set_digits, set_decimals, keep_attr, ignore_labels, keep.labels)}}{Converts the specified columns to the given type.}
\item{\code{copy_columns(col_names)}}{Copies the specified columns in the data.}
\item{\code{drop_unused_factor_levels(col_name)}}{Drops unused factor levels in the specified column.}
\item{\code{set_factor_levels(col_name, new_labels, new_levels, set_new_labels)}}{Sets the factor levels for the specified column.}
\item{\code{edit_factor_level(col_name, old_level, new_level)}}{Edits a factor level in the specified column.}
\item{\code{set_factor_reference_level(col_name, new_ref_level)}}{Sets the reference level for a factor column.}
\item{\code{reorder_factor_levels(col_name, new_level_names)}}{Reorders the factor levels for the specified column.}
\item{\code{get_column_count(use_column_selection)}}{Gets the count of columns in the data frame.}
\item{\code{get_column_names(as_list, include, exclude, excluded_items, max_no, use_current_column_selection)}}{Gets the names of the columns in the data frame.}
\item{\code{get_data_type(col_name)}}{Gets the data type of the specified column.}
\item{\code{set_hidden_columns(col_names)}}{Sets the specified columns as hidden.}
\item{\code{unhide_all_columns()}}{Unhides all columns.}
\item{\code{set_row_names(row_names)}}{Sets the row names of the data.}
\item{\code{set_col_names(col_names)}}{Sets the column names of the data.}
\item{\code{get_row_names()}}{Gets the row names of the data.}
\item{\code{get_dim_dataframe()}}{Gets the dimensions of the data frame.}
\item{\code{set_protected_columns(col_names)}}{Sets the specified columns as protected.}
\item{\code{add_filter(filter, filter_name, replace, set_as_current, na.rm, is_no_filter, and_or, inner_not, outer_not)}}{Adds a filter to the data.}
\item{\code{add_filter_as_levels(filter_levels, column)}}{Adds multiple filters based on the levels of a specified column.}
\item{\code{get_current_filter()}}{Gets the current filter applied to the data.}
\item{\code{set_current_filter(filter_name)}}{Sets the current filter for the data.}
\item{\code{get_filter_names(as_list, include, exclude, excluded_items)}}{Gets the names of all filters.}
\item{\code{get_filter(filter_name)}}{Gets a specific filter by name.}
\item{\code{get_filter_as_logical(filter_name)}}{Gets the logical vector of a filter.}
\item{\code{get_filter_column_names(filter_name)}}{Gets the column names used in a filter.}
\item{\code{get_current_filter_column_names()}}{Gets the column names used in the current filter.}
\item{\code{filter_applied()}}{Checks if a filter is applied.}
\item{\code{remove_current_filter()}}{Remove the current filter.}
\item{\code{filter_string(filter_name)}}{Returns the string representation of a filter.}
\item{\code{get_filter_as_instat_calculation(filter_name)}}{Returns the filter as an instat calculation object.}
\item{\code{add_column_selection(column_selection, name, replace, set_as_current, is_everything, and_or)}}{Adds a column selection to the data.}
\item{\code{get_current_column_selection()}}{Gets the current column selection applied to the data.}
\item{\code{set_current_column_selection(name)}}{Sets the current column selection for the data.}
\item{\code{get_column_selection_names(as_list, include, exclude, excluded_items)}}{Gets the names of all column selections.}
\item{\code{get_column_selection(name)}}{Gets a specific column selection by name.}
\item{\code{get_column_selection_column_names(name)}}{Gets the column names used in a column selection.}
\item{\code{get_column_selected_column_names(column_selection_name)}}{Gets the selected column names for a given column selection name.}
\item{\code{column_selection_applied()}}{Checks if a column selection is applied.}
\item{\code{remove_current_column_selection()}}{Removes the current column selection.}
\item{\code{get_variables_metadata_fields(as_list, include, exclude, excluded_items)}}{Gets the fields of the variables metadata.}
\item{\code{add_object(object_name, object_type_label, object_format, object)}}{Adds an object with its metadata to the list of objects.}
\item{\code{get_object_names(object_type_label, as_list)}}{Gets the names of objects of a specified type.}
\item{\code{get_objects(object_type_label)}}{Gets objects of a specified type.}
\item{\code{get_object(object_name)}}{Gets a specific object by name.}
\item{\code{rename_object(object_name, new_name, object_type)}}{Renames an object.}
\item{\code{delete_objects(data_name, object_names, object_type)}}{Deletes specified objects.}
\item{\code{reorder_objects(new_order)}}{Reorders the objects.}
\item{\code{data_clone(include_objects, include_metadata, include_logs, include_filters, include_column_selections, include_calculations, include_comments, ...)}}{Clones the data with specified attributes included or excluded.}
\item{\code{freeze_columns(column)}}{Freezes the specified columns.}
\item{\code{unfreeze_columns()}}{Unfreezes all columns.}
\item{\code{add_key(col_names, key_name)}}{Adds a key with specified columns.}
\item{\code{is_key(col_names)}}{Checks if specified columns form a key.}
\item{\code{has_key()}}{Checks if there is a key in the data.}
\item{\code{get_keys(key_name)}}{Gets the keys of the data.}
\item{\code{remove_key(key_name)}}{Removes a specified key.}
\item{\code{get_comments(comment_id)}}{Gets the comments for the data.}
\item{\code{remove_comment(key_name)}}{Removes a comment.}
\item{\code{set_structure_columns(struc_type_1, struc_type_2, struc_type_3)}}{Sets the structure columns of the data.}
\item{\code{add_dependent_columns(columns, dependent_cols)}}{Adds dependent columns to the specified columns.}
\item{\code{set_column_colours(columns, colours)}}{Sets the colours of the specified columns.}
\item{\code{has_colours(columns)}}{Checks if the specified columns have colours.}
\item{\code{set_column_colours_by_metadata(data_name, columns, property)}}{Sets the colours of columns based on metadata property.}
\item{\code{remove_column_colours()}}{Removes the colours of the columns.}
\item{\code{graph_one_variable(columns, numeric, categorical, output, free_scale_axis, ncol, coord_flip, ...)}}{Creates a graph for a single variable.}
\item{\code{make_date_yearmonthday(year, month, day, f_year, f_month, f_day, year_format, month_format)}}{Creates a date from year, month, and day columns.}
\item{\code{make_date_yeardoy(year, doy, base, doy_typical_length)}}{Creates a date from year and day of year columns.}
\item{\code{set_contrasts_of_factor(col_name, new_contrasts, defined_contr_matrix)}}{Sets contrasts for a factor column in the data.}
\item{\code{split_date(col_name = "", year_val = FALSE, year_name = FALSE, leap_year = FALSE, month_val = FALSE, month_abbr = FALSE, month_name = FALSE, week_val = FALSE, week_abbr = FALSE, week_name = FALSE, weekday_val = FALSE, weekday_abbr = FALSE, weekday_name = FALSE, day = FALSE, day_in_month = FALSE, day_in_year = FALSE, day_in_year_366 = FALSE, pentad_val = FALSE, pentad_abbr = FALSE, dekad_val = FALSE, dekad_abbr = FALSE, quarter_val = FALSE, quarter_abbr = FALSE, with_year = FALSE, s_start_month = 1, s_start_day_in_month = 1, days_in_month = FALSE)}}{Extracts components such as year, month, week, weekday, etc., from a date column and creates respective new columns.}
\item{\code{set_climatic_types(types)}}{Sets the climatic types for columns in the data.}
\item{\code{append_climatic_types(types)}}{Appends climatic types to columns in the data.}
\item{\code{make_inventory_plot(date_col, station_col = NULL, year_col = NULL, doy_col = NULL, element_cols = NULL, add_to_data = FALSE, year_doy_plot = FALSE, coord_flip = FALSE, facet_by = NULL, facet_xsize = 9, facet_ysize = 9, facet_xangle = 90, facet_yangle = 90, graph_title = "Inventory Plot", graph_subtitle = NULL, graph_caption = NULL, title_size = NULL, subtitle_size = NULL, caption_size = NULL, labelXAxis, labelYAxis, xSize = NULL, ySize = NULL, Xangle = NULL, Yangle = NULL, scale_xdate, fromXAxis = NULL, toXAxis = NULL, byXaxis = NULL, date_ylabels, legend_position = NULL, xlabelsize = NULL, ylabelsize = NULL, scale = NULL, dir = "", row_col_number, nrow = NULL, ncol = NULL, scale_ydate = FALSE, date_ybreaks, step = 1, key_colours = c("red", "grey"), display_rain_days = FALSE, rain_cats = list(breaks = c(0, 0.85, Inf), labels = c("Dry", "Rain"), key_colours = c("tan3", "blue")))}}{Creates an inventory plot for specified date and element columns.}
\item{\code{infill_missing_dates(date_name, factors, start_month, start_date, end_date, resort = TRUE)}}{Infills missing dates in the data for a specified date column, with optional factors, start and end dates.}
\item{\code{get_key_names(include_overall = TRUE, include, exclude, include_empty = FALSE, as_list = FALSE, excluded_items = c())}}{Retrieves key names from the data, with options to include overall, include or exclude specific keys, and return as a list.}
\item{\code{define_corruption_outputs(output_columns = c())}}{Defines the specified output columns as corruption outputs and updates metadata accordingly.}
\item{\code{define_red_flags(red_flags = c())}}{Defines the specified columns as red flags and updates metadata accordingly.}
\item{\code{define_as_procurement_country_level_data(types = c(), auto_generate = TRUE)}}{Defines the data as procurement country-level data with specified types and optionally auto-generates columns.}
\item{\code{is_corruption_type_present(type)}}{Checks if the specified corruption type is present in the data.}
\item{\code{get_CRI_component_column_names()}}{Retrieves the column names that are components of the Corruption Risk Index (CRI).}
\item{\code{get_red_flag_column_names()}}{Retrieves the column names that are defined as red flags.}
\item{\code{get_CRI_column_names()}}{Retrieves the column names that start with "CRI".}
\item{\code{get_corruption_column_name(type)}}{Gets the column name associated with the specified corruption type.}
\item{\code{set_procurement_types(primary_types = c(), calculated_types = c(), auto_generate = TRUE)}}{Sets the specified primary and calculated procurement types, and optionally auto-generates columns.}
\item{\code{generate_award_year()}}{Generates and appends the award year column to the data.}
\item{\code{generate_procedure_type()}}{Generates and appends the procedure type column to the data.}
\item{\code{generate_procuring_authority_id()}}{Generates and appends the procuring authority ID column to the data.}
\item{\code{generate_winner_id()}}{Generates and appends the winner ID column to the data.}
\item{\code{generate_foreign_winner()}}{Generates and appends the foreign winner column to the data.}
\item{\code{generate_procurement_type_categories()}}{Generates and appends the procurement type categories column to the data.}
\item{\code{generate_procurement_type_2()}}{Generates and appends the procurement type 2 column to the data.}
\item{\code{generate_procurement_type_3()}}{Generates and appends the procurement type 3 column to the data.}
\item{\code{generate_signature_period()}}{Generates and appends the signature period column to the data.}
\item{\code{generate_signature_period_corrected()}}{Generates and appends the corrected signature period column to the data.}
\item{\code{generate_signature_period_5Q()}}{Generates and appends the signature period 5 quantiles column to the data.}
\item{\code{generate_signature_period_25Q()}}{Generates and appends the signature period 25 quantiles column to the data.}
\item{\code{generate_rolling_contract_no_winners()}}{Generates and appends the rolling contract number of winners column to the data.}
\item{\code{generate_rolling_contract_no_issuer()}}{Generates and appends the rolling contract number of issuers column to the data.}
\item{\code{generate_rolling_contract_value_sum_issuer()}}{Generates and appends the rolling contract value sum of issuers column to the data.}
\item{\code{generate_rolling_contract_value_sum_winner()}}{Generates and appends the rolling contract value sum of winners column to the data.}
\item{\code{generate_rolling_contract_value_share_winner()}}{Generates and appends the rolling contract value share of winners column to the data.}
\item{\code{generate_single_bidder()}}{Generates and appends the single bidder column to the data.}
\item{\code{generate_contract_value_share_over_threshold()}}{Generates and appends the contract value share over threshold column to the data.}
\item{\code{generate_all_bids()}}{Generates and appends the all bids column to the data.}
\item{\code{generate_all_bids_trimmed()}}{Generates and appends the all bids trimmed column to the data.}
\item{\code{standardise_country_names(country_columns = c())}}{Standardises the country names in the specified columns.}
\item{\code{get_climatic_column_name(col_name)}}{Gets the climatic column name from the data.}
\item{\code{is_climatic_data()}}{Checks if the data is defined as climatic.}
\item{\code{append_column_attributes(col_name, new_attr)}}{Appends attributes to the specified column.}
\item{\code{display_daily_graph(data_name, date_col = NULL, station_col = NULL, year_col = NULL, doy_col = NULL, climatic_element = NULL, rug_colour = "red", bar_colour = "blue", upper_limit = 100)}}{Creates and displays daily graphs for the specified climatic element.}
\item{\code{get_variables_metadata_names(columns)}}{Gets the names of the metadata attributes for the specified columns.}
\item{\code{create_variable_set(set_name, columns)}}{Creates a variable set with the specified name and columns.}
\item{\code{update_variable_set(set_name, columns, new_set_name)}}{Updates the variable set with the specified columns and new set name.}
\item{\code{delete_variable_sets(set_names)}}{Deletes the specified variable sets.}
\item{\code{get_variable_sets_names(include_overall = TRUE, include, exclude, include_empty = FALSE, as_list = FALSE, excluded_items = c())}}{Gets the names of the variable sets.}
\item{\code{get_variable_sets(set_names, force_as_list)}}{Gets the specified variable sets.}
\item{\code{patch_climate_element(date_col_name = "", var = "", vars = c(), max_mean_bias = NA, max_stdev_bias = NA, column_name, station_col_name, time_interval = "month")}}{Patches the specified climate element with the given parameters.}
\item{\code{visualize_element_na(element_col_name, element_col_name_imputed, station_col_name, x_axis_labels_col_name, ncol = 2, type = "distribution", xlab = NULL, ylab = NULL, legend = TRUE, orientation = "horizontal", interval_size = 1461, x_with_truth = NULL, measure = "percent")}}{Visualizes the NA values in the specified element column with the given parameters.}
\item{\code{get_data_entry_data(station, date, elements, view_variables, station_name, type, start_date, end_date)}}{Gets the data entry data for the specified parameters.}
\item{\code{save_data_entry_data(new_data, rows_changed, add_flags = FALSE, ...)}}{Saves the data entry data with the specified parameters.}
\item{\code{add_flag_fields(col_names)}}{Adds flag fields to the specified columns.}
\item{\code{remove_empty(which = c("rows", "cols"))}}{Removes empty rows or columns from the data.}
\item{\code{replace_values_with_NA(row_index, column_index)}}{Replaces values with NA in the specified rows and columns.}
\item{\code{set_options_by_context_types(obyc_types = NULL, key_columns = NULL)}}{Set options by context types for the current data sheet.}
\item{\code{has_labels(col_names)}}{Checks if the specified columns have labels.}
\item{\code{display_daily_table(data_name, climatic_element, date_col = date_col, year_col = year_col, station_col = station_col, Misscode, Tracecode, Zerocode, monstats = c("min", "mean", "median", "max", "IQR", "sum"))}}{Display a daily summary table for a specified climatic data element.}

\item{\code{add_comment(new_comment)}}{Adds a new \code{instat_comment} object to the data sheet if the key is defined and valid.}
\item{\code{delete_comment(comment_id)}}{Deletes a comment from the data sheet based on the comment ID.}
\item{\code{get_comment_ids()}}{Retrieves all comment IDs currently stored in the data sheet.}
\item{\code{get_comments_as_data_frame()}}{Converts all comments in the data sheet to a data frame format for easier inspection and analysis.}

\item{\code{save_calculation(calc)}}{Save a Calculation to the DataSheet.}

\item{\code{merge_data(new_data, by = NULL, type = "left", match = "all")}}{Merge New Data with Existing Data}
\item{\code{calculate_summary(calc, ...)}}{Calculate Summaries for Specified Columns}
\item{\code{get_column_climatic_type(col_name, attr_name)}}{Retrieve the climatic type attribute for a specific column.}
\item{\code{update_selection(new_values, column_selection_name = NULL)}}{Update Column Selection.}
\item{\code{anova_tables2(x_col_names, y_col_name, total = FALSE, signif.stars = FALSE, sign_level = FALSE, means = FALSE, interaction = FALSE)}}{Generate an ANOVA table for specified predictor and response variables. Optionally includes totals, significance levels, and means.}

\item{\code{set_tricot_types(types)}}{Sets the tricot types for columns in the data.}
\item{\code{get_tricot_column_name(col_name)}}{Gets the tricot column name from the data.}
\item{\code{is_tricot_data()}}{Checks if the data is defined as tricot.}
\item{\code{get_column_tricot_type(col_name, attr_name)}}{Retrieve the tricot type attribute for a specific column.}

}
}

\section{Active bindings}{

\describe{
\item{\code{data_changed}}{Logical, indicates if the data has changed. If setting a value, \code{new_value} must be \code{TRUE} or \code{FALSE}.}
\item{\code{metadata_changed}}{Logical, indicates if the metadata has changed. If setting a value, \code{new_value} must be \code{TRUE} or \code{FALSE}.}
\item{\code{variables_metadata_changed}}{Logical, indicates if the variables metadata has changed. If setting a value, \code{new_value} must be \code{TRUE} or \code{FALSE}.}
\item{\code{current_filter}}{A list representing the current filter. If setting a value, \code{filter} must be a list.}
\item{\code{current_column_selection}}{A list representing the current column selection. If setting a value, \code{column_selection} must be a list.}
}
}

\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{data_changed}}{Logical, indicates if the data has changed.
If setting a value, new_value must be TRUE or FALSE.}

\item{\code{metadata_changed}}{Logical, indicates if the metadata has changed.
If setting a value, new_value must be TRUE or FALSE.}

\item{\code{variables_metadata_changed}}{Logical, indicates if the variables metadata has changed.
If setting a value, new_value must be TRUE or FALSE.}

\item{\code{current_filter}}{A list representing the current filter.
If setting a value, filter must be a list.}

\item{\code{current_column_selection}}{A list representing the current column selection.
If setting a value, column_selection must be a list.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DataSheet-new}{\code{DataSheet$new()}}
\item \href{#method-DataSheet-set_data}{\code{DataSheet$set_data()}}
\item \href{#method-DataSheet-set_meta}{\code{DataSheet$set_meta()}}
\item \href{#method-DataSheet-clear_metadata}{\code{DataSheet$clear_metadata()}}
\item \href{#method-DataSheet-set_changes}{\code{DataSheet$set_changes()}}
\item \href{#method-DataSheet-set_filters}{\code{DataSheet$set_filters()}}
\item \href{#method-DataSheet-set_column_selections}{\code{DataSheet$set_column_selections()}}
\item \href{#method-DataSheet-set_objects}{\code{DataSheet$set_objects()}}
\item \href{#method-DataSheet-set_calculations}{\code{DataSheet$set_calculations()}}
\item \href{#method-DataSheet-set_keys}{\code{DataSheet$set_keys()}}
\item \href{#method-DataSheet-set_comments}{\code{DataSheet$set_comments()}}
\item \href{#method-DataSheet-set_data_changed}{\code{DataSheet$set_data_changed()}}
\item \href{#method-DataSheet-set_variables_metadata_changed}{\code{DataSheet$set_variables_metadata_changed()}}
\item \href{#method-DataSheet-set_metadata_changed}{\code{DataSheet$set_metadata_changed()}}
\item \href{#method-DataSheet-set_enable_disable_undo}{\code{DataSheet$set_enable_disable_undo()}}
\item \href{#method-DataSheet-save_state_to_undo_history}{\code{DataSheet$save_state_to_undo_history()}}
\item \href{#method-DataSheet-is_undo}{\code{DataSheet$is_undo()}}
\item \href{#method-DataSheet-has_undo_history}{\code{DataSheet$has_undo_history()}}
\item \href{#method-DataSheet-undo_last_action}{\code{DataSheet$undo_last_action()}}
\item \href{#method-DataSheet-redo_last_action}{\code{DataSheet$redo_last_action()}}
\item \href{#method-DataSheet-set_scalars}{\code{DataSheet$set_scalars()}}
\item \href{#method-DataSheet-set_undo_history}{\code{DataSheet$set_undo_history()}}
\item \href{#method-DataSheet-get_scalars}{\code{DataSheet$get_scalars()}}
\item \href{#method-DataSheet-get_scalar_names}{\code{DataSheet$get_scalar_names()}}
\item \href{#method-DataSheet-get_scalar_value}{\code{DataSheet$get_scalar_value()}}
\item \href{#method-DataSheet-add_scalar}{\code{DataSheet$add_scalar()}}
\item \href{#method-DataSheet-get_data_frame}{\code{DataSheet$get_data_frame()}}
\item \href{#method-DataSheet-get_variables_metadata}{\code{DataSheet$get_variables_metadata()}}
\item \href{#method-DataSheet-get_column_data_types}{\code{DataSheet$get_column_data_types()}}
\item \href{#method-DataSheet-get_column_labels}{\code{DataSheet$get_column_labels()}}
\item \href{#method-DataSheet-get_data_frame_label}{\code{DataSheet$get_data_frame_label()}}
\item \href{#method-DataSheet-clear_variables_metadata}{\code{DataSheet$clear_variables_metadata()}}
\item \href{#method-DataSheet-get_metadata}{\code{DataSheet$get_metadata()}}
\item \href{#method-DataSheet-get_changes}{\code{DataSheet$get_changes()}}
\item \href{#method-DataSheet-get_calculations}{\code{DataSheet$get_calculations()}}
\item \href{#method-DataSheet-get_calculation_names}{\code{DataSheet$get_calculation_names()}}
\item \href{#method-DataSheet-add_columns_to_data}{\code{DataSheet$add_columns_to_data()}}
\item \href{#method-DataSheet-get_columns_from_data}{\code{DataSheet$get_columns_from_data()}}
\item \href{#method-DataSheet-anova_tables}{\code{DataSheet$anova_tables()}}
\item \href{#method-DataSheet-cor}{\code{DataSheet$cor()}}
\item \href{#method-DataSheet-rename_column_in_data}{\code{DataSheet$rename_column_in_data()}}
\item \href{#method-DataSheet-remove_columns_in_data}{\code{DataSheet$remove_columns_in_data()}}
\item \href{#method-DataSheet-replace_value_in_data}{\code{DataSheet$replace_value_in_data()}}
\item \href{#method-DataSheet-paste_from_clipboard}{\code{DataSheet$paste_from_clipboard()}}
\item \href{#method-DataSheet-append_to_metadata}{\code{DataSheet$append_to_metadata()}}
\item \href{#method-DataSheet-append_to_variables_metadata}{\code{DataSheet$append_to_variables_metadata()}}
\item \href{#method-DataSheet-append_to_changes}{\code{DataSheet$append_to_changes()}}
\item \href{#method-DataSheet-is_metadata}{\code{DataSheet$is_metadata()}}
\item \href{#method-DataSheet-is_variables_metadata}{\code{DataSheet$is_variables_metadata()}}
\item \href{#method-DataSheet-add_defaults_meta}{\code{DataSheet$add_defaults_meta()}}
\item \href{#method-DataSheet-add_defaults_variables_metadata}{\code{DataSheet$add_defaults_variables_metadata()}}
\item \href{#method-DataSheet-remove_rows_in_data}{\code{DataSheet$remove_rows_in_data()}}
\item \href{#method-DataSheet-get_next_default_column_name}{\code{DataSheet$get_next_default_column_name()}}
\item \href{#method-DataSheet-reorder_columns_in_data}{\code{DataSheet$reorder_columns_in_data()}}
\item \href{#method-DataSheet-insert_row_in_data}{\code{DataSheet$insert_row_in_data()}}
\item \href{#method-DataSheet-get_data_frame_length}{\code{DataSheet$get_data_frame_length()}}
\item \href{#method-DataSheet-get_factor_data_frame}{\code{DataSheet$get_factor_data_frame()}}
\item \href{#method-DataSheet-get_column_factor_levels}{\code{DataSheet$get_column_factor_levels()}}
\item \href{#method-DataSheet-sort_dataframe}{\code{DataSheet$sort_dataframe()}}
\item \href{#method-DataSheet-convert_column_to_type}{\code{DataSheet$convert_column_to_type()}}
\item \href{#method-DataSheet-copy_columns}{\code{DataSheet$copy_columns()}}
\item \href{#method-DataSheet-drop_unused_factor_levels}{\code{DataSheet$drop_unused_factor_levels()}}
\item \href{#method-DataSheet-set_factor_levels}{\code{DataSheet$set_factor_levels()}}
\item \href{#method-DataSheet-edit_factor_level}{\code{DataSheet$edit_factor_level()}}
\item \href{#method-DataSheet-set_factor_reference_level}{\code{DataSheet$set_factor_reference_level()}}
\item \href{#method-DataSheet-reorder_factor_levels}{\code{DataSheet$reorder_factor_levels()}}
\item \href{#method-DataSheet-get_column_count}{\code{DataSheet$get_column_count()}}
\item \href{#method-DataSheet-get_column_names}{\code{DataSheet$get_column_names()}}
\item \href{#method-DataSheet-get_data_type}{\code{DataSheet$get_data_type()}}
\item \href{#method-DataSheet-set_hidden_columns}{\code{DataSheet$set_hidden_columns()}}
\item \href{#method-DataSheet-unhide_all_columns}{\code{DataSheet$unhide_all_columns()}}
\item \href{#method-DataSheet-set_row_names}{\code{DataSheet$set_row_names()}}
\item \href{#method-DataSheet-set_col_names}{\code{DataSheet$set_col_names()}}
\item \href{#method-DataSheet-get_row_names}{\code{DataSheet$get_row_names()}}
\item \href{#method-DataSheet-get_dim_dataframe}{\code{DataSheet$get_dim_dataframe()}}
\item \href{#method-DataSheet-set_protected_columns}{\code{DataSheet$set_protected_columns()}}
\item \href{#method-DataSheet-add_filter}{\code{DataSheet$add_filter()}}
\item \href{#method-DataSheet-add_filter_as_levels}{\code{DataSheet$add_filter_as_levels()}}
\item \href{#method-DataSheet-get_current_filter}{\code{DataSheet$get_current_filter()}}
\item \href{#method-DataSheet-set_current_filter}{\code{DataSheet$set_current_filter()}}
\item \href{#method-DataSheet-get_filter_names}{\code{DataSheet$get_filter_names()}}
\item \href{#method-DataSheet-get_filter}{\code{DataSheet$get_filter()}}
\item \href{#method-DataSheet-get_filter_as_logical}{\code{DataSheet$get_filter_as_logical()}}
\item \href{#method-DataSheet-get_filter_column_names}{\code{DataSheet$get_filter_column_names()}}
\item \href{#method-DataSheet-get_current_filter_column_names}{\code{DataSheet$get_current_filter_column_names()}}
\item \href{#method-DataSheet-filter_applied}{\code{DataSheet$filter_applied()}}
\item \href{#method-DataSheet-remove_current_filter}{\code{DataSheet$remove_current_filter()}}
\item \href{#method-DataSheet-filter_string}{\code{DataSheet$filter_string()}}
\item \href{#method-DataSheet-get_filter_as_instat_calculation}{\code{DataSheet$get_filter_as_instat_calculation()}}
\item \href{#method-DataSheet-add_column_selection}{\code{DataSheet$add_column_selection()}}
\item \href{#method-DataSheet-get_current_column_selection}{\code{DataSheet$get_current_column_selection()}}
\item \href{#method-DataSheet-set_current_column_selection}{\code{DataSheet$set_current_column_selection()}}
\item \href{#method-DataSheet-get_column_selection_names}{\code{DataSheet$get_column_selection_names()}}
\item \href{#method-DataSheet-get_column_selection}{\code{DataSheet$get_column_selection()}}
\item \href{#method-DataSheet-get_column_selection_column_names}{\code{DataSheet$get_column_selection_column_names()}}
\item \href{#method-DataSheet-get_column_selected_column_names}{\code{DataSheet$get_column_selected_column_names()}}
\item \href{#method-DataSheet-column_selection_applied}{\code{DataSheet$column_selection_applied()}}
\item \href{#method-DataSheet-remove_current_column_selection}{\code{DataSheet$remove_current_column_selection()}}
\item \href{#method-DataSheet-get_variables_metadata_fields}{\code{DataSheet$get_variables_metadata_fields()}}
\item \href{#method-DataSheet-add_object}{\code{DataSheet$add_object()}}
\item \href{#method-DataSheet-get_object_names}{\code{DataSheet$get_object_names()}}
\item \href{#method-DataSheet-get_objects}{\code{DataSheet$get_objects()}}
\item \href{#method-DataSheet-get_object}{\code{DataSheet$get_object()}}
\item \href{#method-DataSheet-rename_object}{\code{DataSheet$rename_object()}}
\item \href{#method-DataSheet-delete_objects}{\code{DataSheet$delete_objects()}}
\item \href{#method-DataSheet-reorder_objects}{\code{DataSheet$reorder_objects()}}
\item \href{#method-DataSheet-data_clone}{\code{DataSheet$data_clone()}}
\item \href{#method-DataSheet-freeze_columns}{\code{DataSheet$freeze_columns()}}
\item \href{#method-DataSheet-unfreeze_columns}{\code{DataSheet$unfreeze_columns()}}
\item \href{#method-DataSheet-add_key}{\code{DataSheet$add_key()}}
\item \href{#method-DataSheet-is_key}{\code{DataSheet$is_key()}}
\item \href{#method-DataSheet-has_key}{\code{DataSheet$has_key()}}
\item \href{#method-DataSheet-get_keys}{\code{DataSheet$get_keys()}}
\item \href{#method-DataSheet-remove_key}{\code{DataSheet$remove_key()}}
\item \href{#method-DataSheet-get_comments}{\code{DataSheet$get_comments()}}
\item \href{#method-DataSheet-remove_comment}{\code{DataSheet$remove_comment()}}
\item \href{#method-DataSheet-set_structure_columns}{\code{DataSheet$set_structure_columns()}}
\item \href{#method-DataSheet-add_dependent_columns}{\code{DataSheet$add_dependent_columns()}}
\item \href{#method-DataSheet-set_column_colours}{\code{DataSheet$set_column_colours()}}
\item \href{#method-DataSheet-has_colours}{\code{DataSheet$has_colours()}}
\item \href{#method-DataSheet-set_column_colours_by_metadata}{\code{DataSheet$set_column_colours_by_metadata()}}
\item \href{#method-DataSheet-remove_column_colours}{\code{DataSheet$remove_column_colours()}}
\item \href{#method-DataSheet-graph_one_variable}{\code{DataSheet$graph_one_variable()}}
\item \href{#method-DataSheet-make_date_yearmonthday}{\code{DataSheet$make_date_yearmonthday()}}
\item \href{#method-DataSheet-make_date_yeardoy}{\code{DataSheet$make_date_yeardoy()}}
\item \href{#method-DataSheet-set_contrasts_of_factor}{\code{DataSheet$set_contrasts_of_factor()}}
\item \href{#method-DataSheet-split_date}{\code{DataSheet$split_date()}}
\item \href{#method-DataSheet-set_climatic_types}{\code{DataSheet$set_climatic_types()}}
\item \href{#method-DataSheet-append_climatic_types}{\code{DataSheet$append_climatic_types()}}
\item \href{#method-DataSheet-make_inventory_plot}{\code{DataSheet$make_inventory_plot()}}
\item \href{#method-DataSheet-infill_missing_dates}{\code{DataSheet$infill_missing_dates()}}
\item \href{#method-DataSheet-get_key_names}{\code{DataSheet$get_key_names()}}
\item \href{#method-DataSheet-define_corruption_outputs}{\code{DataSheet$define_corruption_outputs()}}
\item \href{#method-DataSheet-define_red_flags}{\code{DataSheet$define_red_flags()}}
\item \href{#method-DataSheet-define_as_procurement_country_level_data}{\code{DataSheet$define_as_procurement_country_level_data()}}
\item \href{#method-DataSheet-is_corruption_type_present}{\code{DataSheet$is_corruption_type_present()}}
\item \href{#method-DataSheet-get_CRI_component_column_names}{\code{DataSheet$get_CRI_component_column_names()}}
\item \href{#method-DataSheet-get_red_flag_column_names}{\code{DataSheet$get_red_flag_column_names()}}
\item \href{#method-DataSheet-get_CRI_column_names}{\code{DataSheet$get_CRI_column_names()}}
\item \href{#method-DataSheet-get_corruption_column_name}{\code{DataSheet$get_corruption_column_name()}}
\item \href{#method-DataSheet-set_procurement_types}{\code{DataSheet$set_procurement_types()}}
\item \href{#method-DataSheet-generate_award_year}{\code{DataSheet$generate_award_year()}}
\item \href{#method-DataSheet-generate_procedure_type}{\code{DataSheet$generate_procedure_type()}}
\item \href{#method-DataSheet-generate_procuring_authority_id}{\code{DataSheet$generate_procuring_authority_id()}}
\item \href{#method-DataSheet-generate_winner_id}{\code{DataSheet$generate_winner_id()}}
\item \href{#method-DataSheet-generate_foreign_winner}{\code{DataSheet$generate_foreign_winner()}}
\item \href{#method-DataSheet-generate_procurement_type_categories}{\code{DataSheet$generate_procurement_type_categories()}}
\item \href{#method-DataSheet-generate_procurement_type_2}{\code{DataSheet$generate_procurement_type_2()}}
\item \href{#method-DataSheet-generate_procurement_type_3}{\code{DataSheet$generate_procurement_type_3()}}
\item \href{#method-DataSheet-generate_signature_period}{\code{DataSheet$generate_signature_period()}}
\item \href{#method-DataSheet-generate_signature_period_corrected}{\code{DataSheet$generate_signature_period_corrected()}}
\item \href{#method-DataSheet-generate_signature_period_5Q}{\code{DataSheet$generate_signature_period_5Q()}}
\item \href{#method-DataSheet-generate_signature_period_25Q}{\code{DataSheet$generate_signature_period_25Q()}}
\item \href{#method-DataSheet-generate_rolling_contract_no_winners}{\code{DataSheet$generate_rolling_contract_no_winners()}}
\item \href{#method-DataSheet-generate_rolling_contract_no_issuer}{\code{DataSheet$generate_rolling_contract_no_issuer()}}
\item \href{#method-DataSheet-generate_rolling_contract_value_sum_issuer}{\code{DataSheet$generate_rolling_contract_value_sum_issuer()}}
\item \href{#method-DataSheet-generate_rolling_contract_value_sum_winner}{\code{DataSheet$generate_rolling_contract_value_sum_winner()}}
\item \href{#method-DataSheet-generate_rolling_contract_value_share_winner}{\code{DataSheet$generate_rolling_contract_value_share_winner()}}
\item \href{#method-DataSheet-generate_single_bidder}{\code{DataSheet$generate_single_bidder()}}
\item \href{#method-DataSheet-generate_contract_value_share_over_threshold}{\code{DataSheet$generate_contract_value_share_over_threshold()}}
\item \href{#method-DataSheet-generate_all_bids}{\code{DataSheet$generate_all_bids()}}
\item \href{#method-DataSheet-generate_all_bids_trimmed}{\code{DataSheet$generate_all_bids_trimmed()}}
\item \href{#method-DataSheet-standardise_country_names}{\code{DataSheet$standardise_country_names()}}
\item \href{#method-DataSheet-get_climatic_column_name}{\code{DataSheet$get_climatic_column_name()}}
\item \href{#method-DataSheet-is_climatic_data}{\code{DataSheet$is_climatic_data()}}
\item \href{#method-DataSheet-append_column_attributes}{\code{DataSheet$append_column_attributes()}}
\item \href{#method-DataSheet-display_daily_graph}{\code{DataSheet$display_daily_graph()}}
\item \href{#method-DataSheet-get_variables_metadata_names}{\code{DataSheet$get_variables_metadata_names()}}
\item \href{#method-DataSheet-get_variables_from_metadata}{\code{DataSheet$get_variables_from_metadata()}}
\item \href{#method-DataSheet-create_variable_set}{\code{DataSheet$create_variable_set()}}
\item \href{#method-DataSheet-update_variable_set}{\code{DataSheet$update_variable_set()}}
\item \href{#method-DataSheet-delete_variable_sets}{\code{DataSheet$delete_variable_sets()}}
\item \href{#method-DataSheet-get_variable_sets_names}{\code{DataSheet$get_variable_sets_names()}}
\item \href{#method-DataSheet-get_variable_sets}{\code{DataSheet$get_variable_sets()}}
\item \href{#method-DataSheet-patch_climate_element}{\code{DataSheet$patch_climate_element()}}
\item \href{#method-DataSheet-visualize_element_na}{\code{DataSheet$visualize_element_na()}}
\item \href{#method-DataSheet-get_data_entry_data}{\code{DataSheet$get_data_entry_data()}}
\item \href{#method-DataSheet-save_data_entry_data}{\code{DataSheet$save_data_entry_data()}}
\item \href{#method-DataSheet-add_flag_fields}{\code{DataSheet$add_flag_fields()}}
\item \href{#method-DataSheet-remove_empty}{\code{DataSheet$remove_empty()}}
\item \href{#method-DataSheet-replace_values_with_NA}{\code{DataSheet$replace_values_with_NA()}}
\item \href{#method-DataSheet-set_options_by_context_types}{\code{DataSheet$set_options_by_context_types()}}
\item \href{#method-DataSheet-has_labels}{\code{DataSheet$has_labels()}}
\item \href{#method-DataSheet-add_comment}{\code{DataSheet$add_comment()}}
\item \href{#method-DataSheet-delete_comment}{\code{DataSheet$delete_comment()}}
\item \href{#method-DataSheet-get_comment_ids}{\code{DataSheet$get_comment_ids()}}
\item \href{#method-DataSheet-get_comments_as_data_frame}{\code{DataSheet$get_comments_as_data_frame()}}
\item \href{#method-DataSheet-save_calculation}{\code{DataSheet$save_calculation()}}
\item \href{#method-DataSheet-merge_data}{\code{DataSheet$merge_data()}}
\item \href{#method-DataSheet-calculate_summary}{\code{DataSheet$calculate_summary()}}
\item \href{#method-DataSheet-get_column_climatic_type}{\code{DataSheet$get_column_climatic_type()}}
\item \href{#method-DataSheet-update_selection}{\code{DataSheet$update_selection()}}
\item \href{#method-DataSheet-anova_tables2}{\code{DataSheet$anova_tables2()}}
\item \href{#method-DataSheet-set_tricot_types}{\code{DataSheet$set_tricot_types()}}
\item \href{#method-DataSheet-get_tricot_column_name}{\code{DataSheet$get_tricot_column_name()}}
\item \href{#method-DataSheet-is_tricot_data}{\code{DataSheet$is_tricot_data()}}
\item \href{#method-DataSheet-get_column_tricot_type}{\code{DataSheet$get_column_tricot_type()}}
\item \href{#method-DataSheet-display_daily_table}{\code{DataSheet$display_daily_table()}}
\item \href{#method-DataSheet-clone}{\code{DataSheet$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-new"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-new}{}}}
\subsection{Method \code{new()}}{
Create a new DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$new(
  data = data.frame(),
  data_name = "",
  variables_metadata = data.frame(),
  metadata = list(),
  imported_from = "",
  messages = TRUE,
  convert = TRUE,
  create = TRUE,
  start_point = 1,
  filters = list(),
  column_selections = list(),
  objects = list(),
  calculations = list(),
  scalars = list(),
  keys = list(),
  comments = list(),
  keep_attributes = TRUE,
  undo_history = list(),
  redo_undo_history = list(),
  disable_undo = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{A data frame to be managed by the DataSheet object. Default is an empty data frame.}

\item{\code{data_name}}{A character string for the name of the data set. Default is an empty string.}

\item{\code{variables_metadata}}{A data frame containing metadata for the variables. Default is an empty data frame.}

\item{\code{metadata}}{A list containing additional metadata. Default is an empty list.}

\item{\code{imported_from}}{A character string indicating the source of the data import. Default is an empty string.}

\item{\code{messages}}{Logical, if TRUE messages will be shown during the setup. Default is TRUE.}

\item{\code{convert}}{Logical, if TRUE data will be converted. Default is TRUE.}

\item{\code{create}}{Logical, if TRUE the data will be created. Default is TRUE.}

\item{\code{start_point}}{Numeric, the starting point for default naming. Default is 1.}

\item{\code{filters}}{A list of filters to be applied to the data. Default is an empty list.}

\item{\code{column_selections}}{A list of column selections. Default is an empty list.}

\item{\code{objects}}{A list of objects associated with the data. Default is an empty list.}

\item{\code{calculations}}{A list of calculations to be performed on the data. Default is an empty list.}

\item{\code{scalars}}{A list of scalars on the data. Default is an empty list.}

\item{\code{keys}}{A list of keys for the data. Default is an empty list.}

\item{\code{comments}}{A list of comments associated with the data. Default is an empty list.}

\item{\code{keep_attributes}}{Logical, if TRUE attributes will be kept. Default is TRUE.}

\item{\code{undo_history}}{A list containing a history of data frames which will be replaced with the current data frame if the user presses undo.}

\item{\code{redo_undo_history}}{A list containing the undo history to redo.}

\item{\code{disable_undo}}{Logical, if TRUE undo option is disabled. Default is FALSE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{DataSheet} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_data}{}}}
\subsection{Method \code{set_data()}}{
Sets the data for the DataSheet object. Accepts various data types and converts them to a data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_data(new_data, messages = TRUE, check_names = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_data}}{The new data to be set. It can be a matrix, tibble, data.table, ts object, array, or vector.}

\item{\code{messages}}{Logical, if TRUE, messages will be shown during the data setup. Default is TRUE.}

\item{\code{check_names}}{Logical, if TRUE, column names will be checked and made valid if necessary. Default is TRUE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The DataSheet object with the updated data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_meta"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_meta}{}}}
\subsection{Method \code{set_meta()}}{
Sets the metadata for the DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_meta(new_meta)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_meta}}{A list containing the new metadata.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-clear_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-clear_metadata}{}}}
\subsection{Method \code{clear_metadata()}}{
Clears the metadata for the DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$clear_metadata()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_changes"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_changes}{}}}
\subsection{Method \code{set_changes()}}{
Sets the changes for the DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_changes(new_changes)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_changes}}{A list containing the new changes.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_filters"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_filters}{}}}
\subsection{Method \code{set_filters()}}{
Sets the filters for the DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_filters(new_filters)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_filters}}{A list containing the new filters.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_column_selections"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_column_selections}{}}}
\subsection{Method \code{set_column_selections()}}{
Sets the column selections for the DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_column_selections(new_column_selections)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_column_selections}}{A list containing the new column selections.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_objects"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_objects}{}}}
\subsection{Method \code{set_objects()}}{
Sets the objects for the DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_objects(new_objects)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_objects}}{A list containing the new objects.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_calculations"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_calculations}{}}}
\subsection{Method \code{set_calculations()}}{
Sets the calculations for the DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_calculations(new_calculations)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_calculations}}{A list containing the new calculations.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_keys"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_keys}{}}}
\subsection{Method \code{set_keys()}}{
Sets the keys for the DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_keys(new_keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_keys}}{A list containing the new keys.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_comments"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_comments}{}}}
\subsection{Method \code{set_comments()}}{
Sets the comments for the DataSheet object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_comments(new_comments)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_comments}}{A list containing the new comments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_data_changed"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_data_changed}{}}}
\subsection{Method \code{set_data_changed()}}{
Set the data_changed flag.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_data_changed(new_val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_val}}{Logical, new value for the data_changed flag.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_variables_metadata_changed"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_variables_metadata_changed}{}}}
\subsection{Method \code{set_variables_metadata_changed()}}{
Set the variables_metadata_changed flag.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_variables_metadata_changed(new_val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_val}}{Logical, new value for the variables_metadata_changed flag.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_metadata_changed"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_metadata_changed}{}}}
\subsection{Method \code{set_metadata_changed()}}{
Set the metadata_changed flag.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_metadata_changed(new_val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_val}}{Logical, new value for the metadata_changed flag.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_enable_disable_undo"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_enable_disable_undo}{}}}
\subsection{Method \code{set_enable_disable_undo()}}{
Set whether undo functionality is enabled or disabled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_enable_disable_undo(disable_undo)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{disable_undo}}{Logical, whether to disable the undo functionality.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-save_state_to_undo_history"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-save_state_to_undo_history}{}}}
\subsection{Method \code{save_state_to_undo_history()}}{
Save the current state to the undo history.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$save_state_to_undo_history()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-is_undo"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-is_undo}{}}}
\subsection{Method \code{is_undo()}}{
Check if undo functionality is currently disabled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$is_undo()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical, TRUE if undo functionality is disabled, otherwise FALSE.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-has_undo_history"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-has_undo_history}{}}}
\subsection{Method \code{has_undo_history()}}{
Check if there are any actions available to undo.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$has_undo_history()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical, TRUE if undo history is available, otherwise FALSE.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-undo_last_action"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-undo_last_action}{}}}
\subsection{Method \code{undo_last_action()}}{
Undo the last action by restoring the previous state.
Removes the last saved state from the undo history.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$undo_last_action()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-redo_last_action"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-redo_last_action}{}}}
\subsection{Method \code{redo_last_action()}}{
Redo the last undone action by restoring the next state.
Moves the restored state back to the undo history.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$redo_last_action()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_scalars"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_scalars}{}}}
\subsection{Method \code{set_scalars()}}{
Set the scalars property.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_scalars(new_scalars)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_scalars}}{List, the new scalars to set.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_undo_history"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_undo_history}{}}}
\subsection{Method \code{set_undo_history()}}{
Set the undo history with memory management.
Ensures undo history size and memory usage are within defined limits.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_undo_history(new_data, attributes = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_data}}{Data frame, the new data to store in undo history.}

\item{\code{attributes}}{List, attributes associated with the data.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_scalars"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_scalars}{}}}
\subsection{Method \code{get_scalars()}}{
Retrieve the current scalars.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_scalars()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List, the scalars currently stored.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_scalar_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_scalar_names}{}}}
\subsection{Method \code{get_scalar_names()}}{
Get the names of the scalars.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_scalar_names(as_list = FALSE, excluded_items = c(), ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{as_list}}{Logical, whether to return the names as a list. Defaults to FALSE.}

\item{\code{excluded_items}}{Character vector, items to exclude from the result. Defaults to an empty vector.}

\item{\code{...}}{Additional arguments for customization.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector or list, the names of the scalars.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_scalar_value"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_scalar_value}{}}}
\subsection{Method \code{get_scalar_value()}}{
Retrieve the value of a specific scalar by name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_scalar_value(scalar_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{scalar_name}}{Character, the name of the scalar to retrieve.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The value of the specified scalar.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_scalar"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_scalar}{}}}
\subsection{Method \code{add_scalar()}}{
Add a scalar to the scalars property.
Replaces an existing scalar if one with the same name already exists.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_scalar(scalar_name = "", scalar_value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{scalar_name}}{Character, the name of the scalar. Defaults to the next available name.}

\item{\code{scalar_value}}{The value of the scalar.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_data_frame"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_data_frame}{}}}
\subsection{Method \code{get_data_frame()}}{
Get the data frame with various options for filtering, column selection, and attribute handling.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_data_frame(
  convert_to_character = FALSE,
  include_hidden_columns = TRUE,
  use_current_filter = TRUE,
  use_column_selection = TRUE,
  filter_name = "",
  column_selection_name = "",
  stack_data = FALSE,
  remove_attr = FALSE,
  retain_attr = FALSE,
  max_cols,
  max_rows,
  drop_unused_filter_levels = FALSE,
  start_row,
  start_col,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{convert_to_character}}{Logical, if TRUE converts the data to character format.}

\item{\code{include_hidden_columns}}{Logical, if TRUE includes hidden columns in the output.}

\item{\code{use_current_filter}}{Logical, if TRUE uses the current filter applied to the data.}

\item{\code{use_column_selection}}{Logical, if TRUE uses the current column selection.}

\item{\code{filter_name}}{Character, specifies the name of the filter to use.}

\item{\code{column_selection_name}}{Character, specifies the name of the column selection to use.}

\item{\code{stack_data}}{Logical, if TRUE stacks the data.}

\item{\code{remove_attr}}{Logical, if TRUE removes certain attributes from the data.}

\item{\code{retain_attr}}{Logical, if TRUE retains certain attributes in the data.}

\item{\code{max_cols}}{Numeric, specifies the maximum number of columns to include in the output.}

\item{\code{max_rows}}{Numeric, specifies the maximum number of rows to include in the output.}

\item{\code{drop_unused_filter_levels}}{Logical, if TRUE drops unused levels from factors in the filtered data.}

\item{\code{start_row}}{Numeric, specifies the starting row for the output.}

\item{\code{start_col}}{Numeric, specifies the starting column for the output.}

\item{\code{...}}{Additional arguments passed to internal functions.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame with the specified options applied.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_variables_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_variables_metadata}{}}}
\subsection{Method \code{get_variables_metadata()}}{
Get the metadata for the variables in the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_variables_metadata(
  data_type = "all",
  convert_to_character = FALSE,
  property,
  column,
  error_if_no_property = TRUE,
  direct_from_attributes = FALSE,
  use_column_selection = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_type}}{Character, the data type to filter by. Default is "all".}

\item{\code{convert_to_character}}{Logical, if TRUE converts the metadata to character format.}

\item{\code{property}}{Character, the property of the metadata to retrieve.}

\item{\code{column}}{Character, the column to retrieve metadata for.}

\item{\code{error_if_no_property}}{Logical, if TRUE throws an error if the property is not found.}

\item{\code{direct_from_attributes}}{Logical, if TRUE retrieves metadata directly from attributes.}

\item{\code{use_column_selection}}{Logical, if TRUE uses the current column selection.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame or list of metadata for the variables.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_data_types"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_data_types}{}}}
\subsection{Method \code{get_column_data_types()}}{
Get the data types of the specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_data_types(columns)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Character vector, names of the columns to get data types for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character vector of data types for the specified columns.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_labels"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_labels}{}}}
\subsection{Method \code{get_column_labels()}}{
Get the labels of the specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_labels(columns)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Character vector, names of the columns to get labels for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character vector of labels for the specified columns.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_data_frame_label"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_data_frame_label}{}}}
\subsection{Method \code{get_data_frame_label()}}{
Get the label of the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_data_frame_label(use_current_filter = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{use_current_filter}}{Logical, if TRUE uses the current filter applied to the data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character string representing the label of the data frame.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-clear_variables_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-clear_variables_metadata}{}}}
\subsection{Method \code{clear_variables_metadata()}}{
Clear the variables metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$clear_variables_metadata()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_metadata}{}}}
\subsection{Method \code{get_metadata()}}{
Get the metadata for the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_metadata(
  label,
  include_calculated = TRUE,
  excluded_not_for_display = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{label}}{Character, specifies the metadata label to retrieve.}

\item{\code{include_calculated}}{Logical, if TRUE includes calculated metadata.}

\item{\code{excluded_not_for_display}}{Logical, if TRUE excludes metadata not for display.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of metadata for the data frame.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_changes"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_changes}{}}}
\subsection{Method \code{get_changes()}}{
Get the changes made to the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_changes()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of changes made to the data frame.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_calculations"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_calculations}{}}}
\subsection{Method \code{get_calculations()}}{
Get the calculations applied to the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_calculations()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of calculations applied to the data frame.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_calculation_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_calculation_names}{}}}
\subsection{Method \code{get_calculation_names()}}{
Get the names of the calculations applied to the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_calculation_names(as_list = FALSE, excluded_items = c())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{as_list}}{Logical, if TRUE returns the names as a list.}

\item{\code{excluded_items}}{Character vector, names of calculations to exclude.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character vector or list of calculation names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_columns_to_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_columns_to_data}{}}}
\subsection{Method \code{add_columns_to_data()}}{
Add new columns to the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_columns_to_data(
  col_name = "",
  col_data,
  use_col_name_as_prefix = FALSE,
  hidden = FALSE,
  before,
  adjacent_column = "",
  num_cols,
  require_correct_length = TRUE,
  keep_existing_position = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, name of the new column.}

\item{\code{col_data}}{Data, the data for the new column.}

\item{\code{use_col_name_as_prefix}}{Logical, if TRUE uses the column name as a prefix.}

\item{\code{hidden}}{Logical, if TRUE the new column will be hidden.}

\item{\code{before}}{Logical, if TRUE adds the new column before the specified adjacent column.}

\item{\code{adjacent_column}}{Character, name of the adjacent column.}

\item{\code{num_cols}}{Numeric, number of columns to add.}

\item{\code{require_correct_length}}{Logical, if TRUE requires the new column to have the correct length.}

\item{\code{keep_existing_position}}{Logical, if TRUE keeps the existing position of the new column.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated data frame with the new columns added.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_columns_from_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_columns_from_data}{}}}
\subsection{Method \code{get_columns_from_data()}}{
Get the data for the specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_columns_from_data(
  col_names,
  force_as_data_frame = FALSE,
  use_current_filter = TRUE,
  use_column_selection = TRUE,
  remove_labels = FALSE,
  drop_unused_filter_levels = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, names of the columns to retrieve.}

\item{\code{force_as_data_frame}}{Logical, if TRUE forces the output to be a data frame.}

\item{\code{use_current_filter}}{Logical, if TRUE uses the current filter applied to the data.}

\item{\code{use_column_selection}}{Logical, if TRUE uses the current column selection.}

\item{\code{remove_labels}}{Logical, if TRUE removes labels from the data.}

\item{\code{drop_unused_filter_levels}}{Logical, if TRUE drops unused levels from factors in the filtered data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame or vector of the specified columns.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-anova_tables"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-anova_tables}{}}}
\subsection{Method \code{anova_tables()}}{
Generate ANOVA tables for the specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$anova_tables(
  x_col_names,
  y_col_name,
  signif.stars = FALSE,
  sign_level = FALSE,
  means = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x_col_names}}{Character vector, names of the columns to use as independent variables.}

\item{\code{y_col_name}}{Character, name of the dependent variable column.}

\item{\code{signif.stars}}{Logical, if TRUE includes significance stars in the output.}

\item{\code{sign_level}}{Logical, if TRUE includes significance levels in the output.}

\item{\code{means}}{Logical, if TRUE includes means in the output.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-cor"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-cor}{}}}
\subsection{Method \code{cor()}}{
Calculate the correlation between specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$cor(
  x_col_names,
  y_col_name,
  use = "everything",
  method = c("pearson", "kendall", "spearman")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x_col_names}}{Character vector, names of the columns to use as independent variables.}

\item{\code{y_col_name}}{Character, name of the dependent variable column.}

\item{\code{use}}{Character, specifies the handling of missing values. Default is "everything".}

\item{\code{method}}{Character vector, specifies the correlation method to be used. One of "pearson", "kendall", or "spearman". Default is c("pearson", "kendall", "spearman").}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A matrix of correlation coefficients between the specified columns.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-rename_column_in_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-rename_column_in_data}{}}}
\subsection{Method \code{rename_column_in_data()}}{
Rename a column in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$rename_column_in_data(
  curr_col_name = "",
  new_col_name = "",
  label = "",
  type = "single",
  .fn,
  .cols = everything(),
  new_column_names_df,
  new_labels_df,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{curr_col_name}}{Character, the current name of the column.}

\item{\code{new_col_name}}{Character, the new name for the column.}

\item{\code{label}}{Character, the label for the column.}

\item{\code{type}}{Character, the type of renaming to perform.}

\item{\code{.fn}}{Function, the function to use for renaming.}

\item{\code{.cols}}{Character, the columns to rename.}

\item{\code{new_column_names_df}}{Data frame, the new column names.}

\item{\code{new_labels_df}}{Data frame, the new labels for the columns.}

\item{\code{...}}{Additional arguments passed to the function.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-remove_columns_in_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-remove_columns_in_data}{}}}
\subsection{Method \code{remove_columns_in_data()}}{
Remove specified columns from the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$remove_columns_in_data(cols = c(), allow_delete_all = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cols}}{Character vector, the names of the columns to remove.}

\item{\code{allow_delete_all}}{Logical, if TRUE, allows deleting all columns.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-replace_value_in_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-replace_value_in_data}{}}}
\subsection{Method \code{replace_value_in_data()}}{
Replace values in the specified columns and rows.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$replace_value_in_data(
  col_names,
  rows,
  old_value,
  old_is_missing = FALSE,
  start_value = NA,
  end_value = NA,
  new_value,
  new_is_missing = FALSE,
  closed_start_value = TRUE,
  closed_end_value = TRUE,
  locf = FALSE,
  from_last = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns.}

\item{\code{rows}}{Character vector, the names of the rows.}

\item{\code{old_value}}{The old value to be replaced.}

\item{\code{old_is_missing}}{Logical, if TRUE, treats old_value as missing.}

\item{\code{start_value}}{Numeric, the starting value for the range to replace.}

\item{\code{end_value}}{Numeric, the ending value for the range to replace.}

\item{\code{new_value}}{The new value to replace with.}

\item{\code{new_is_missing}}{Logical, if TRUE, treats new_value as missing.}

\item{\code{closed_start_value}}{Logical, if TRUE, includes the start value in the range.}

\item{\code{closed_end_value}}{Logical, if TRUE, includes the end value in the range.}

\item{\code{locf}}{Logical, if TRUE, uses the last observation carried forward method.}

\item{\code{from_last}}{Logical, if TRUE, uses the last observation from the end.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-paste_from_clipboard"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-paste_from_clipboard}{}}}
\subsection{Method \code{paste_from_clipboard()}}{
Paste data from the clipboard into the specified columns and rows.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$paste_from_clipboard(
  col_names,
  start_row_pos = 1,
  first_clip_row_is_header = FALSE,
  clip_board_text
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns.}

\item{\code{start_row_pos}}{Numeric, the starting row position.}

\item{\code{first_clip_row_is_header}}{Logical, if TRUE, treats the first row of the clipboard data as a header.}

\item{\code{clip_board_text}}{Character, the clipboard text data.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-append_to_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-append_to_metadata}{}}}
\subsection{Method \code{append_to_metadata()}}{
Append a new value to the metadata of the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$append_to_metadata(property, new_value = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{property}}{Character, the property to append to.}

\item{\code{new_value}}{The new value to append.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-append_to_variables_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-append_to_variables_metadata}{}}}
\subsection{Method \code{append_to_variables_metadata()}}{
Append a new value to the variables metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$append_to_variables_metadata(col_names, property, new_val = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns.}

\item{\code{property}}{Character, the property to append to.}

\item{\code{new_val}}{The new value to append.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-append_to_changes"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-append_to_changes}{}}}
\subsection{Method \code{append_to_changes()}}{
Append a value to the changes list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$append_to_changes(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{The value to append.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-is_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-is_metadata}{}}}
\subsection{Method \code{is_metadata()}}{
Check if a string is in the metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$is_metadata(str)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{str}}{Character, the string to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical, TRUE if the string is in the metadata, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-is_variables_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-is_variables_metadata}{}}}
\subsection{Method \code{is_variables_metadata()}}{
Check if a string is in the variables metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$is_variables_metadata(str, col, return_vector = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{str}}{Character, the string to check.}

\item{\code{col}}{Character, the column to check in.}

\item{\code{return_vector}}{Logical, if TRUE, returns the result as a vector.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical, TRUE if the string is in the variables metadata, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_defaults_meta"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_defaults_meta}{}}}
\subsection{Method \code{add_defaults_meta()}}{
Adds default values to the metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_defaults_meta()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_defaults_variables_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_defaults_variables_metadata}{}}}
\subsection{Method \code{add_defaults_variables_metadata()}}{
Adds default values to the variables metadata for the specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_defaults_variables_metadata(column_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{column_names}}{Character vector, the names of the columns.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-remove_rows_in_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-remove_rows_in_data}{}}}
\subsection{Method \code{remove_rows_in_data()}}{
Removes the specified rows from the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$remove_rows_in_data(row_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{row_names}}{Character vector, the names of the rows to remove.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_next_default_column_name"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_next_default_column_name}{}}}
\subsection{Method \code{get_next_default_column_name()}}{
Gets the next default column name based on the given prefix.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_next_default_column_name(prefix)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prefix}}{Character, the prefix for the new column name.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character, the next default column name.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-reorder_columns_in_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-reorder_columns_in_data}{}}}
\subsection{Method \code{reorder_columns_in_data()}}{
Reorders the columns in the data based on the given order.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$reorder_columns_in_data(col_order)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_order}}{Character vector, the new order of the columns.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-insert_row_in_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-insert_row_in_data}{}}}
\subsection{Method \code{insert_row_in_data()}}{
Inserts new rows into the data at the specified position.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$insert_row_in_data(
  start_row,
  row_data = c(),
  number_rows = 1,
  before = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{start_row}}{Character, the starting row for the new rows.}

\item{\code{row_data}}{Data frame, the data for the new rows.}

\item{\code{number_rows}}{Numeric, the number of new rows to insert.}

\item{\code{before}}{Logical, if TRUE, inserts the new rows before the specified row.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_data_frame_length"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_data_frame_length}{}}}
\subsection{Method \code{get_data_frame_length()}}{
Gets the length of the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_data_frame_length(use_current_filter = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{use_current_filter}}{Logical, if TRUE, uses the current filter.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric, the length of the data frame.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_factor_data_frame"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_factor_data_frame}{}}}
\subsection{Method \code{get_factor_data_frame()}}{
Gets the data frame for a factor column with optional inclusion of levels and NA level.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_factor_data_frame(
  col_name = "",
  include_levels = TRUE,
  include_NA_level = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the factor column.}

\item{\code{include_levels}}{Logical, if TRUE, includes the levels of the factor.}

\item{\code{include_NA_level}}{Logical, if TRUE, includes the NA level.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Data frame, the data frame for the factor column.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_factor_levels"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_factor_levels}{}}}
\subsection{Method \code{get_column_factor_levels()}}{
Gets the factor levels for the specified column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_factor_levels(col_name = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the column.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector, the factor levels for the column.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-sort_dataframe"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-sort_dataframe}{}}}
\subsection{Method \code{sort_dataframe()}}{
Sorts the data frame based on the specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$sort_dataframe(
  col_names = c(),
  decreasing = FALSE,
  na.last = TRUE,
  by_row_names = FALSE,
  row_names_as_numeric = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns to sort by.}

\item{\code{decreasing}}{Logical, if TRUE, sorts in decreasing order.}

\item{\code{na.last}}{Logical, if TRUE, places NA values last.}

\item{\code{by_row_names}}{Logical, if TRUE, sorts by row names.}

\item{\code{row_names_as_numeric}}{Logical, if TRUE, treats row names as numeric values.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-convert_column_to_type"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-convert_column_to_type}{}}}
\subsection{Method \code{convert_column_to_type()}}{
Converts the specified columns to the given type.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$convert_column_to_type(
  col_names = c(),
  to_type,
  factor_values = NULL,
  set_digits,
  set_decimals = FALSE,
  keep_attr = TRUE,
  ignore_labels = FALSE,
  keep.labels = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns.}

\item{\code{to_type}}{Character, the type to convert to.}

\item{\code{factor_values}}{Character, the factor values to use for conversion.}

\item{\code{set_digits}}{Numeric, the number of digits to use for conversion.}

\item{\code{set_decimals}}{Logical, if TRUE, sets the number of decimals.}

\item{\code{keep_attr}}{Logical, if TRUE, keeps the attributes of the columns.}

\item{\code{ignore_labels}}{Logical, if TRUE, ignores labels during conversion.}

\item{\code{keep.labels}}{Logical, if TRUE, keeps labels during conversion.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-copy_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-copy_columns}{}}}
\subsection{Method \code{copy_columns()}}{
Copies the specified columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$copy_columns(col_names = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns to copy.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-drop_unused_factor_levels"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-drop_unused_factor_levels}{}}}
\subsection{Method \code{drop_unused_factor_levels()}}{
Drops unused factor levels in the specified column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$drop_unused_factor_levels(col_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the column.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_factor_levels"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_factor_levels}{}}}
\subsection{Method \code{set_factor_levels()}}{
Sets the factor levels for the specified column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_factor_levels(
  col_name,
  new_labels,
  new_levels,
  set_new_labels = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the column.}

\item{\code{new_labels}}{Character vector, the new labels for the factor levels.}

\item{\code{new_levels}}{Character vector, the new levels for the factor.}

\item{\code{set_new_labels}}{Logical, if TRUE, sets the new labels.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-edit_factor_level"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-edit_factor_level}{}}}
\subsection{Method \code{edit_factor_level()}}{
Edits the factor level in the specified column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$edit_factor_level(col_name, old_level, new_level)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the column.}

\item{\code{old_level}}{Character, the old factor level.}

\item{\code{new_level}}{Character, the new factor level.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_factor_reference_level"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_factor_reference_level}{}}}
\subsection{Method \code{set_factor_reference_level()}}{
Sets the reference level for a factor column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_factor_reference_level(col_name, new_ref_level)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the column.}

\item{\code{new_ref_level}}{Character, the new reference level.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-reorder_factor_levels"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-reorder_factor_levels}{}}}
\subsection{Method \code{reorder_factor_levels()}}{
Reorders the factor levels in the specified column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$reorder_factor_levels(col_name, new_level_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the column.}

\item{\code{new_level_names}}{Character vector, the new order of the factor levels.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_count"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_count}{}}}
\subsection{Method \code{get_column_count()}}{
Gets the number of columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_count(use_column_selection = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{use_column_selection}}{Logical, if TRUE, uses the current column selection.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Numeric, the number of columns in the data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_names}{}}}
\subsection{Method \code{get_column_names()}}{
Gets the names of the columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_names(
  as_list = FALSE,
  include = list(),
  exclude = list(),
  excluded_items = c(),
  max_no,
  use_current_column_selection = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{as_list}}{Logical, if TRUE, returns the names as a list.}

\item{\code{include}}{List, the properties to include.}

\item{\code{exclude}}{List, the properties to exclude.}

\item{\code{excluded_items}}{Character vector, the items to exclude.}

\item{\code{max_no}}{Numeric, the maximum number of columns to return.}

\item{\code{use_current_column_selection}}{Logical, if TRUE, uses the current column selection.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector or list, the names of the columns in the data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_data_type"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_data_type}{}}}
\subsection{Method \code{get_data_type()}}{
Gets the data type of the specified column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_data_type(col_name = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the column.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character, the data type of the column.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_hidden_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_hidden_columns}{}}}
\subsection{Method \code{set_hidden_columns()}}{
Set the hidden columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_hidden_columns(col_names = c())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns to hide.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-unhide_all_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-unhide_all_columns}{}}}
\subsection{Method \code{unhide_all_columns()}}{
Unhide all columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$unhide_all_columns()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_row_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_row_names}{}}}
\subsection{Method \code{set_row_names()}}{
Set the row names of the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_row_names(row_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{row_names}}{Character vector, the new row names.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_col_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_col_names}{}}}
\subsection{Method \code{set_col_names()}}{
Set the column names of the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_col_names(col_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the new column names.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_row_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_row_names}{}}}
\subsection{Method \code{get_row_names()}}{
Get the row names of the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_row_names()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector, the row names of the data frame.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_dim_dataframe"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_dim_dataframe}{}}}
\subsection{Method \code{get_dim_dataframe()}}{
Get the dimensions of the data frame.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_dim_dataframe()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Numeric vector, the dimensions of the data frame.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_protected_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_protected_columns}{}}}
\subsection{Method \code{set_protected_columns()}}{
Set the protected columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_protected_columns(col_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns to protect.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_filter"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_filter}{}}}
\subsection{Method \code{add_filter()}}{
Add a filter to the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_filter(
  filter,
  filter_name = "",
  replace = TRUE,
  set_as_current = FALSE,
  na.rm = TRUE,
  is_no_filter = FALSE,
  and_or = "&",
  inner_not = FALSE,
  outer_not = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter}}{List, the filter conditions.}

\item{\code{filter_name}}{Character, the name of the filter.}

\item{\code{replace}}{Logical, if TRUE, replaces an existing filter with the same name.}

\item{\code{set_as_current}}{Logical, if TRUE, sets the filter as the current filter.}

\item{\code{na.rm}}{Logical, if TRUE, removes NA values.}

\item{\code{is_no_filter}}{Logical, if TRUE, specifies that no filter is applied.}

\item{\code{and_or}}{Character, specifies the logical operator for combining conditions.}

\item{\code{inner_not}}{Logical, if TRUE, applies negation to the inner condition.}

\item{\code{outer_not}}{Logical, if TRUE, applies negation to the outer condition.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_filter_as_levels"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_filter_as_levels}{}}}
\subsection{Method \code{add_filter_as_levels()}}{
Add filters based on levels of a column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_filter_as_levels(filter_levels, column)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter_levels}}{Character vector, the levels to create filters for.}

\item{\code{column}}{Character, the name of the column.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_current_filter"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_current_filter}{}}}
\subsection{Method \code{get_current_filter()}}{
Get the current filter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_current_filter()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List, the current filter.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_current_filter"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_current_filter}{}}}
\subsection{Method \code{set_current_filter()}}{
Set the current filter by name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_current_filter(filter_name = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter_name}}{Character, the name of the filter to set as current.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_filter_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_filter_names}{}}}
\subsection{Method \code{get_filter_names()}}{
Get the names of all filters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_filter_names(
  as_list = FALSE,
  include = list(),
  exclude = list(),
  excluded_items = c()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{as_list}}{Logical, if TRUE, returns the names as a list.}

\item{\code{include}}{List, the properties to include.}

\item{\code{exclude}}{List, the properties to exclude.}

\item{\code{excluded_items}}{Character vector, the items to exclude.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector or list, the names of the filters.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_filter"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_filter}{}}}
\subsection{Method \code{get_filter()}}{
Get a specific filter by name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_filter(filter_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter_name}}{Character, the name of the filter.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List, the specified filter.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_filter_as_logical"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_filter_as_logical}{}}}
\subsection{Method \code{get_filter_as_logical()}}{
Get the filter as a logical vector.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_filter_as_logical(filter_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter_name}}{Character, the name of the filter.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical vector, the filter applied as a logical vector.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_filter_column_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_filter_column_names}{}}}
\subsection{Method \code{get_filter_column_names()}}{
Get the column names used in a specific filter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_filter_column_names(filter_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter_name}}{Character, the name of the filter.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector, the column names used in the filter.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_current_filter_column_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_current_filter_column_names}{}}}
\subsection{Method \code{get_current_filter_column_names()}}{
Get the column names used in the current filter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_current_filter_column_names()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector, the column names used in the current filter.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-filter_applied"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-filter_applied}{}}}
\subsection{Method \code{filter_applied()}}{
Check if a filter is applied.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$filter_applied()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical, TRUE if a filter is applied, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-remove_current_filter"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-remove_current_filter}{}}}
\subsection{Method \code{remove_current_filter()}}{
Remove the current filter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$remove_current_filter()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-filter_string"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-filter_string}{}}}
\subsection{Method \code{filter_string()}}{
Get the filter as a string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$filter_string(filter_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter_name}}{Character, the name of the filter.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character, the filter as a string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_filter_as_instat_calculation"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_filter_as_instat_calculation}{}}}
\subsection{Method \code{get_filter_as_instat_calculation()}}{
Get the filter as an instat calculation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_filter_as_instat_calculation(filter_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filter_name}}{Character, the name of the filter.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Instat calculation, the filter as an instat calculation.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_column_selection"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_column_selection}{}}}
\subsection{Method \code{add_column_selection()}}{
Add a column selection to the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_column_selection(
  column_selection,
  name = "",
  replace = TRUE,
  set_as_current = FALSE,
  is_everything = FALSE,
  and_or = "|"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{column_selection}}{List, the column selection conditions.}

\item{\code{name}}{Character, the name of the column selection.}

\item{\code{replace}}{Logical, if TRUE, replaces an existing column selection with the same name.}

\item{\code{set_as_current}}{Logical, if TRUE, sets the column selection as the current selection.}

\item{\code{is_everything}}{Logical, if TRUE, selects all columns.}

\item{\code{and_or}}{Character, specifies the logical operator for combining conditions.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_current_column_selection"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_current_column_selection}{}}}
\subsection{Method \code{get_current_column_selection()}}{
Get the current column selection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_current_column_selection()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
List, the current column selection.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_current_column_selection"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_current_column_selection}{}}}
\subsection{Method \code{set_current_column_selection()}}{
Set the current column selection by name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_current_column_selection(name = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Character, the name of the column selection to set as current.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_selection_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_selection_names}{}}}
\subsection{Method \code{get_column_selection_names()}}{
Get the names of all column selections.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_selection_names(
  as_list = FALSE,
  include = list(),
  exclude = list(),
  excluded_items = c()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{as_list}}{Logical, if TRUE, returns the names as a list.}

\item{\code{include}}{List, the properties to include.}

\item{\code{exclude}}{List, the properties to exclude.}

\item{\code{excluded_items}}{Character vector, the items to exclude.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector or list, the names of the column selections.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_selection"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_selection}{}}}
\subsection{Method \code{get_column_selection()}}{
Get a specific column selection by name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_selection(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Character, the name of the column selection.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List, the specified column selection.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_selection_column_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_selection_column_names}{}}}
\subsection{Method \code{get_column_selection_column_names()}}{
Get the column names selected by a specific column selection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_selection_column_names(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{Character, the name of the column selection.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector, the column names selected by the column selection.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_selected_column_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_selected_column_names}{}}}
\subsection{Method \code{get_column_selected_column_names()}}{
Get the column names selected by the current column selection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_selected_column_names(column_selection_name = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{column_selection_name}}{Character, the name of the column selection.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector, the column names selected by the current column selection.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-column_selection_applied"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-column_selection_applied}{}}}
\subsection{Method \code{column_selection_applied()}}{
Check if a column selection is applied.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$column_selection_applied()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical, TRUE if a column selection is applied, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-remove_current_column_selection"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-remove_current_column_selection}{}}}
\subsection{Method \code{remove_current_column_selection()}}{
Remove the current column selection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$remove_current_column_selection()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_variables_metadata_fields"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_variables_metadata_fields}{}}}
\subsection{Method \code{get_variables_metadata_fields()}}{
Get the fields of the variables metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_variables_metadata_fields(
  as_list = FALSE,
  include = c(),
  exclude = c(),
  excluded_items = c()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{as_list}}{Logical, if TRUE, returns the fields as a list.}

\item{\code{include}}{Character vector, the fields to include.}

\item{\code{exclude}}{Character vector, the fields to exclude.}

\item{\code{excluded_items}}{Character vector, the items to exclude.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector or list, the fields of the variables metadata.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_object"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_object}{}}}
\subsection{Method \code{add_object()}}{
Add an object to the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_object(object_name, object_type_label, object_format, object)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object_name}}{Character, the name of the object.}

\item{\code{object_type_label}}{Character, the type label of the object.}

\item{\code{object_format}}{Character, the format of the object.}

\item{\code{object}}{Any, the object to add.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_object_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_object_names}{}}}
\subsection{Method \code{get_object_names()}}{
Get the names of objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_object_names(object_type_label = NULL, as_list = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object_type_label}}{Character, the type label of the objects to get names for.}

\item{\code{as_list}}{Logical, if TRUE, returns the names as a list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character vector or list, the names of the objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_objects"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_objects}{}}}
\subsection{Method \code{get_objects()}}{
Get objects by type label.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_objects(object_type_label = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object_type_label}}{Character, the type label of the objects to get.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List, the objects with the specified type label.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_object"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_object}{}}}
\subsection{Method \code{get_object()}}{
Get a specific object by name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_object(object_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object_name}}{Character, the name of the object.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Any, the specified object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-rename_object"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-rename_object}{}}}
\subsection{Method \code{rename_object()}}{
Rename an object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$rename_object(object_name, new_name, object_type = "object")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{object_name}}{Character, the current name of the object.}

\item{\code{new_name}}{Character, the new name for the object.}

\item{\code{object_type}}{Character, the type of the object.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-delete_objects"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-delete_objects}{}}}
\subsection{Method \code{delete_objects()}}{
Delete objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$delete_objects(data_name, object_names, object_type = "object")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_name}}{Character, the name of the data.}

\item{\code{object_names}}{Character vector, the names of the objects to delete.}

\item{\code{object_type}}{Character, the type of the objects to delete.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-reorder_objects"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-reorder_objects}{}}}
\subsection{Method \code{reorder_objects()}}{
Reorder objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$reorder_objects(new_order)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_order}}{Character vector, the new order of the objects.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-data_clone"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-data_clone}{}}}
\subsection{Method \code{data_clone()}}{
Clone the data sheet.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$data_clone(
  include_objects = TRUE,
  include_metadata = TRUE,
  include_logs = TRUE,
  include_filters = TRUE,
  include_column_selections = TRUE,
  include_calculations = TRUE,
  include_comments = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_objects}}{Logical, if TRUE, includes objects in the clone.}

\item{\code{include_metadata}}{Logical, if TRUE, includes metadata in the clone.}

\item{\code{include_logs}}{Logical, if TRUE, includes logs in the clone.}

\item{\code{include_filters}}{Logical, if TRUE, includes filters in the clone.}

\item{\code{include_column_selections}}{Logical, if TRUE, includes column selections in the clone.}

\item{\code{include_calculations}}{Logical, if TRUE, includes calculations in the clone.}

\item{\code{include_comments}}{Logical, if TRUE, includes comments in the clone.}

\item{\code{...}}{Additional arguments.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
DataSheet, the cloned data sheet.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-freeze_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-freeze_columns}{}}}
\subsection{Method \code{freeze_columns()}}{
Freeze columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$freeze_columns(column)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{column}}{Character, the name of the column to freeze.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-unfreeze_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-unfreeze_columns}{}}}
\subsection{Method \code{unfreeze_columns()}}{
Unfreeze all columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$unfreeze_columns()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_key"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_key}{}}}
\subsection{Method \code{add_key()}}{
Add a key to the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_key(col_names, key_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns to use as the key.}

\item{\code{key_name}}{Character, the name of the key.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-is_key"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-is_key}{}}}
\subsection{Method \code{is_key()}}{
Check if columns are a key.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$is_key(col_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{Character vector, the names of the columns to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical, TRUE if the columns are a key, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-has_key"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-has_key}{}}}
\subsection{Method \code{has_key()}}{
Check if the data has a key.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$has_key()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Logical, TRUE if the data has a key, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_keys"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_keys}{}}}
\subsection{Method \code{get_keys()}}{
Get the keys in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_keys(key_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key_name}}{Character, the name of the key to get.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List, the keys in the data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-remove_key"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-remove_key}{}}}
\subsection{Method \code{remove_key()}}{
Remove a key from the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$remove_key(key_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key_name}}{Character, the name of the key to remove.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_comments"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_comments}{}}}
\subsection{Method \code{get_comments()}}{
Get comments in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_comments(comment_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{comment_id}}{Character, the ID of the comment to get.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List, the comments in the data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-remove_comment"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-remove_comment}{}}}
\subsection{Method \code{remove_comment()}}{
Remove a comment from the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$remove_comment(key_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key_name}}{Character, the name of the key to remove the comment from.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_structure_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_structure_columns}{}}}
\subsection{Method \code{set_structure_columns()}}{
Set the structure columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_structure_columns(struc_type_1, struc_type_2, struc_type_3)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{struc_type_1}}{Character vector, the names of the columns for structure type 1.}

\item{\code{struc_type_2}}{Character vector, the names of the columns for structure type 2.}

\item{\code{struc_type_3}}{Character vector, the names of the columns for structure type 3.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_dependent_columns"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_dependent_columns}{}}}
\subsection{Method \code{add_dependent_columns()}}{
Add dependent columns to the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_dependent_columns(columns, dependent_cols)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Character vector, the names of the columns.}

\item{\code{dependent_cols}}{List, the dependent columns.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_column_colours"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_column_colours}{}}}
\subsection{Method \code{set_column_colours()}}{
Set the colors of the columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_column_colours(columns, colours)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Character vector, the names of the columns.}

\item{\code{colours}}{Character vector, the colors to set.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-has_colours"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-has_colours}{}}}
\subsection{Method \code{has_colours()}}{
Check if columns have colors.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$has_colours(columns)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Character vector, the names of the columns.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical, TRUE if the columns have colors, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_column_colours_by_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_column_colours_by_metadata}{}}}
\subsection{Method \code{set_column_colours_by_metadata()}}{
Set the colors of the columns based on metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_column_colours_by_metadata(data_name, columns, property)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_name}}{Character, the name of the data.}

\item{\code{columns}}{Character vector, the names of the columns.}

\item{\code{property}}{Character, the property to base the colors on.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-remove_column_colours"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-remove_column_colours}{}}}
\subsection{Method \code{remove_column_colours()}}{
Remove the colors from all columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$remove_column_colours()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-graph_one_variable"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-graph_one_variable}{}}}
\subsection{Method \code{graph_one_variable()}}{
Create a graph for one variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$graph_one_variable(
  columns,
  numeric = "geom_boxplot",
  categorical = "geom_bar",
  output = "facets",
  free_scale_axis = FALSE,
  ncol = NULL,
  coord_flip = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{Character vector, the names of the columns.}

\item{\code{numeric}}{Character, the geom for numeric columns.}

\item{\code{categorical}}{Character, the geom for categorical columns.}

\item{\code{output}}{Character, the output type ("facets", "combine", "single").}

\item{\code{free_scale_axis}}{Logical, if TRUE, uses a free scale for the axis.}

\item{\code{ncol}}{Numeric, the number of columns for facets.}

\item{\code{coord_flip}}{Logical, if TRUE, flips the coordinates.}

\item{\code{...}}{Additional arguments for the geom functions.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ggplot2 object, the graph.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-make_date_yearmonthday"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-make_date_yearmonthday}{}}}
\subsection{Method \code{make_date_yearmonthday()}}{
Create a date from year, month, and day columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$make_date_yearmonthday(
  year,
  month,
  day,
  f_year,
  f_month,
  f_day,
  year_format = "\%Y",
  month_format = "\%m"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{year}}{Character, the name of the year column.}

\item{\code{month}}{Character, the name of the month column.}

\item{\code{day}}{Character, the name of the day column.}

\item{\code{f_year}}{Numeric vector, the year values.}

\item{\code{f_month}}{Numeric vector, the month values.}

\item{\code{f_day}}{Numeric vector, the day values.}

\item{\code{year_format}}{Character, the format of the year.}

\item{\code{month_format}}{Character, the format of the month.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Date, the created date.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-make_date_yeardoy"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-make_date_yeardoy}{}}}
\subsection{Method \code{make_date_yeardoy()}}{
Create a date from year and day-of-year columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$make_date_yeardoy(year, doy, base, doy_typical_length = "366")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{year}}{Character, the name of the year column.}

\item{\code{doy}}{Character, the name of the day-of-year column.}

\item{\code{base}}{Numeric, the base year.}

\item{\code{doy_typical_length}}{Character, the typical length of the day-of-year ("365" or "366").}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Date, the created date.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_contrasts_of_factor"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_contrasts_of_factor}{}}}
\subsection{Method \code{set_contrasts_of_factor()}}{
Set the contrasts for a specified factor column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_contrasts_of_factor(
  col_name,
  new_contrasts,
  defined_contr_matrix
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the factor column.}

\item{\code{new_contrasts}}{Character or matrix, the type of contrasts to set or a user-defined contrast matrix.}

\item{\code{defined_contr_matrix}}{Matrix, the user-defined contrast matrix if \code{new_contrasts} is "user_defined".}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-split_date"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-split_date}{}}}
\subsection{Method \code{split_date()}}{
Split a date column into various components like year, month, day, etc., and create corresponding new columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$split_date(
  col_name = "",
  year_val = FALSE,
  year_name = FALSE,
  leap_year = FALSE,
  month_val = FALSE,
  month_abbr = FALSE,
  month_name = FALSE,
  week_val = FALSE,
  week_abbr = FALSE,
  week_name = FALSE,
  weekday_val = FALSE,
  weekday_abbr = FALSE,
  weekday_name = FALSE,
  day = FALSE,
  day_in_month = FALSE,
  day_in_year = FALSE,
  day_in_year_366 = FALSE,
  pentad_val = FALSE,
  pentad_abbr = FALSE,
  dekad_val = FALSE,
  dekad_abbr = FALSE,
  quarter_val = FALSE,
  quarter_abbr = FALSE,
  with_year = FALSE,
  s_start_month = 1,
  s_start_day_in_month = 1,
  days_in_month = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the date column.}

\item{\code{year_val}}{Logical, whether to create a year column.}

\item{\code{year_name}}{Logical, whether to create a year name column.}

\item{\code{leap_year}}{Logical, whether to create a leap year column.}

\item{\code{month_val}}{Logical, whether to create a month value column.}

\item{\code{month_abbr}}{Logical, whether to create a month abbreviation column.}

\item{\code{month_name}}{Logical, whether to create a month name column.}

\item{\code{week_val}}{Logical, whether to create a week value column.}

\item{\code{week_abbr}}{Logical, whether to create a week abbreviation column.}

\item{\code{week_name}}{Logical, whether to create a week name column.}

\item{\code{weekday_val}}{Logical, whether to create a weekday value column.}

\item{\code{weekday_abbr}}{Logical, whether to create a weekday abbreviation column.}

\item{\code{weekday_name}}{Logical, whether to create a weekday name column.}

\item{\code{day}}{Logical, whether to create a day column.}

\item{\code{day_in_month}}{Logical, whether to create a day in month column.}

\item{\code{day_in_year}}{Logical, whether to create a day in year column.}

\item{\code{day_in_year_366}}{Logical, whether to create a day in year (366 days) column.}

\item{\code{pentad_val}}{Logical, whether to create a pentad value column.}

\item{\code{pentad_abbr}}{Logical, whether to create a pentad abbreviation column.}

\item{\code{dekad_val}}{Logical, whether to create a dekad value column.}

\item{\code{dekad_abbr}}{Logical, whether to create a dekad abbreviation column.}

\item{\code{quarter_val}}{Logical, whether to create a quarter value column.}

\item{\code{quarter_abbr}}{Logical, whether to create a quarter abbreviation column.}

\item{\code{with_year}}{Logical, whether to include the year in quarter calculation.}

\item{\code{s_start_month}}{Numeric, the starting month for shifted year calculation.}

\item{\code{s_start_day_in_month}}{Numeric, the starting day in month for shifted year calculation.}

\item{\code{days_in_month}}{Logical, whether to create a days in month column.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_climatic_types"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_climatic_types}{}}}
\subsection{Method \code{set_climatic_types()}}{
Set the climatic types for columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_climatic_types(types)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{types}}{Named character vector, a named vector where names are climatic types and values are the corresponding column names in the dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-append_climatic_types"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-append_climatic_types}{}}}
\subsection{Method \code{append_climatic_types()}}{
Append climatic types to columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$append_climatic_types(types)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{types}}{Named character vector, a named vector where names are climatic types and values are the corresponding column names in the dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-make_inventory_plot"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-make_inventory_plot}{}}}
\subsection{Method \code{make_inventory_plot()}}{
Create an inventory plot for a dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$make_inventory_plot(
  date_col,
  station_col = NULL,
  year_col = NULL,
  doy_col = NULL,
  element_cols = NULL,
  add_to_data = FALSE,
  year_doy_plot = FALSE,
  coord_flip = FALSE,
  facet_by = NULL,
  facet_xsize = 9,
  facet_ysize = 9,
  facet_xangle = 90,
  facet_yangle = 90,
  graph_title = "Inventory Plot",
  graph_subtitle = NULL,
  graph_caption = NULL,
  title_size = NULL,
  subtitle_size = NULL,
  caption_size = NULL,
  labelXAxis,
  labelYAxis,
  xSize = NULL,
  ySize = NULL,
  Xangle = NULL,
  Yangle = NULL,
  scale_xdate,
  fromXAxis = NULL,
  toXAxis = NULL,
  byXaxis = NULL,
  date_ylabels,
  legend_position = NULL,
  xlabelsize = NULL,
  ylabelsize = NULL,
  scale = NULL,
  dir = "",
  row_col_number,
  nrow = NULL,
  ncol = NULL,
  scale_ydate = FALSE,
  date_ybreaks,
  step = 1,
  key_colours = c("red", "grey"),
  display_rain_days = FALSE,
  rain_cats = list(breaks = c(0, 0.85, Inf), labels = c("Dry", "Rain"), key_colours =
    c("tan3", "blue"))
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{date_col}}{Character, the name of the date column.}

\item{\code{station_col}}{Character, the name of the station column. Default is NULL.}

\item{\code{year_col}}{Character, the name of the year column. Default is NULL.}

\item{\code{doy_col}}{Character, the name of the day of year column. Default is NULL.}

\item{\code{element_cols}}{Character vector, the names of the element columns.}

\item{\code{add_to_data}}{Logical, whether to add the plot to the data. Default is FALSE.}

\item{\code{year_doy_plot}}{Logical, whether to plot year vs. day of year. Default is FALSE.}

\item{\code{coord_flip}}{Logical, whether to flip coordinates. Default is FALSE.}

\item{\code{facet_by}}{Character, the faceting method. Default is NULL.}

\item{\code{facet_xsize}}{Numeric, the size of facet x-axis labels. Default is 9.}

\item{\code{facet_ysize}}{Numeric, the size of facet y-axis labels. Default is 9.}

\item{\code{facet_xangle}}{Numeric, the angle of facet x-axis labels. Default is 90.}

\item{\code{facet_yangle}}{Numeric, the angle of facet y-axis labels. Default is 90.}

\item{\code{graph_title}}{Character, the title of the plot. Default is "Inventory Plot".}

\item{\code{graph_subtitle}}{Character, the subtitle of the plot. Default is NULL.}

\item{\code{graph_caption}}{Character, the caption of the plot. Default is NULL.}

\item{\code{title_size}}{Numeric, the size of the plot title. Default is NULL.}

\item{\code{subtitle_size}}{Numeric, the size of the plot subtitle. Default is NULL.}

\item{\code{caption_size}}{Numeric, the size of the plot caption. Default is NULL.}

\item{\code{labelXAxis}}{Character, the label for the x-axis.}

\item{\code{labelYAxis}}{Character, the label for the y-axis.}

\item{\code{xSize}}{Numeric, the size of the x-axis labels. Default is NULL.}

\item{\code{ySize}}{Numeric, the size of the y-axis labels. Default is NULL.}

\item{\code{Xangle}}{Numeric, the angle of the x-axis labels. Default is NULL.}

\item{\code{Yangle}}{Numeric, the angle of the y-axis labels. Default is NULL.}

\item{\code{scale_xdate}}{Logical, whether to scale the x-axis as dates. Default is NULL.}

\item{\code{fromXAxis}}{Date, the starting date for the x-axis scale. Default is NULL.}

\item{\code{toXAxis}}{Date, the ending date for the x-axis scale. Default is NULL.}

\item{\code{byXaxis}}{Character, the interval for the x-axis scale. Default is NULL.}

\item{\code{date_ylabels}}{Character, the labels for the y-axis if scaled as dates. Default is NULL.}

\item{\code{legend_position}}{Character, the position of the legend. Default is NULL.}

\item{\code{xlabelsize}}{Numeric, the size of the x-axis label. Default is NULL.}

\item{\code{ylabelsize}}{Numeric, the size of the y-axis label. Default is NULL.}

\item{\code{scale}}{Character, the scale for faceting. Default is NULL.}

\item{\code{dir}}{Character, the direction for faceting. Default is "".}

\item{\code{row_col_number}}{Numeric, the number of rows or columns for faceting. Default is NULL.}

\item{\code{nrow}}{Numeric, the number of rows for faceting. Default is NULL.}

\item{\code{ncol}}{Numeric, the number of columns for faceting. Default is NULL.}

\item{\code{scale_ydate}}{Logical, whether to scale the y-axis as dates. Default is FALSE.}

\item{\code{date_ybreaks}}{Character, the breaks for the y-axis if scaled as dates. Default is NULL.}

\item{\code{step}}{Numeric, the step size for date breaks. Default is 1.}

\item{\code{key_colours}}{Character vector, the colours for the key. Default is c("red", "grey").}

\item{\code{display_rain_days}}{Logical, whether to display rain days in the plot. Default is FALSE.}

\item{\code{rain_cats}}{List, the categories for rain days, including breaks, labels, and key colours. Default is list(breaks = c(0, 0.85, Inf), labels = c("Dry", "Rain"), key_colours = c("tan3", "blue")).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ggplot object, the inventory plot.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-infill_missing_dates"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-infill_missing_dates}{}}}
\subsection{Method \code{infill_missing_dates()}}{
Infill missing dates in the specified column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$infill_missing_dates(
  date_name,
  factors,
  start_month,
  start_date,
  end_date,
  resort = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{date_name}}{Character, the name of the date column.}

\item{\code{factors}}{Character vector, the names of the factor columns.}

\item{\code{start_month}}{Numeric, the start month for infilling.}

\item{\code{start_date}}{Date, the start date for infilling.}

\item{\code{end_date}}{Date, the end date for infilling.}

\item{\code{resort}}{Logical, if TRUE, sorts the data frame after infilling.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_key_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_key_names}{}}}
\subsection{Method \code{get_key_names()}}{
Get the names of the keys in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_key_names(
  include_overall = TRUE,
  include,
  exclude,
  include_empty = FALSE,
  as_list = FALSE,
  excluded_items = c()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_overall}}{Logical, if TRUE, includes the overall keys.}

\item{\code{include}}{Character vector, the names of the keys to include.}

\item{\code{exclude}}{Character vector, the names of the keys to exclude.}

\item{\code{include_empty}}{Logical, if TRUE, includes empty keys.}

\item{\code{as_list}}{Logical, if TRUE, returns the keys as a list.}

\item{\code{excluded_items}}{Character vector, the items to exclude from the keys.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character vector or list with the names of the keys.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-define_corruption_outputs"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-define_corruption_outputs}{}}}
\subsection{Method \code{define_corruption_outputs()}}{
Define corruption outputs for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$define_corruption_outputs(output_columns = c())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{output_columns}}{Character vector, the names of the output columns.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-define_red_flags"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-define_red_flags}{}}}
\subsection{Method \code{define_red_flags()}}{
Define red flags for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$define_red_flags(red_flags = c())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{red_flags}}{Character vector, the names of the red flag columns.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-define_as_procurement_country_level_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-define_as_procurement_country_level_data}{}}}
\subsection{Method \code{define_as_procurement_country_level_data()}}{
Define the dataset as procurement country level data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$define_as_procurement_country_level_data(
  types = c(),
  auto_generate = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{types}}{Named list, the types of procurement data.}

\item{\code{auto_generate}}{Logical, if TRUE, automatically generates additional data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-is_corruption_type_present"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-is_corruption_type_present}{}}}
\subsection{Method \code{is_corruption_type_present()}}{
Check if a corruption type is present in the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$is_corruption_type_present(type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Character, the corruption type to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Logical, TRUE if the corruption type is present, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_CRI_component_column_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_CRI_component_column_names}{}}}
\subsection{Method \code{get_CRI_component_column_names()}}{
Get the column names for CRI components.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_CRI_component_column_names()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector with the names of the CRI component columns.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_red_flag_column_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_red_flag_column_names}{}}}
\subsection{Method \code{get_red_flag_column_names()}}{
Get the column names for red flag components.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_red_flag_column_names()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector with the names of the red flag columns.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_CRI_column_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_CRI_column_names}{}}}
\subsection{Method \code{get_CRI_column_names()}}{
Get the column names for CRI.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_CRI_column_names()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector with the names of the CRI columns.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_corruption_column_name"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_corruption_column_name}{}}}
\subsection{Method \code{get_corruption_column_name()}}{
Get the column name for a specific corruption type.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_corruption_column_name(type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{Character, the corruption type to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character string with the column name of the specified corruption type.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_procurement_types"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_procurement_types}{}}}
\subsection{Method \code{set_procurement_types()}}{
Set procurement types for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_procurement_types(
  primary_types = c(),
  calculated_types = c(),
  auto_generate = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{primary_types}}{Named list, the primary types of procurement data.}

\item{\code{calculated_types}}{Named list, the calculated types of procurement data.}

\item{\code{auto_generate}}{Logical, if TRUE, automatically generates additional data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_award_year"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_award_year}{}}}
\subsection{Method \code{generate_award_year()}}{
Generate the award year for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_award_year()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_procedure_type"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_procedure_type}{}}}
\subsection{Method \code{generate_procedure_type()}}{
Generate the procedure type for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_procedure_type()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_procuring_authority_id"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_procuring_authority_id}{}}}
\subsection{Method \code{generate_procuring_authority_id()}}{
Generate the procuring authority ID for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_procuring_authority_id()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_winner_id"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_winner_id}{}}}
\subsection{Method \code{generate_winner_id()}}{
Generate the winner ID for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_winner_id()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_foreign_winner"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_foreign_winner}{}}}
\subsection{Method \code{generate_foreign_winner()}}{
Generate the foreign winner flag for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_foreign_winner()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_procurement_type_categories"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_procurement_type_categories}{}}}
\subsection{Method \code{generate_procurement_type_categories()}}{
Generate procurement type categories for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_procurement_type_categories()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_procurement_type_2"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_procurement_type_2}{}}}
\subsection{Method \code{generate_procurement_type_2()}}{
Generate procurement type categories 2 for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_procurement_type_2()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_procurement_type_3"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_procurement_type_3}{}}}
\subsection{Method \code{generate_procurement_type_3()}}{
Generate procurement type categories 3 for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_procurement_type_3()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_signature_period"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_signature_period}{}}}
\subsection{Method \code{generate_signature_period()}}{
Generate the signature period for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_signature_period()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_signature_period_corrected"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_signature_period_corrected}{}}}
\subsection{Method \code{generate_signature_period_corrected()}}{
Generate the corrected signature period for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_signature_period_corrected()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_signature_period_5Q"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_signature_period_5Q}{}}}
\subsection{Method \code{generate_signature_period_5Q()}}{
Generate the signature period quintiles (5 quantiles) for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_signature_period_5Q()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_signature_period_25Q"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_signature_period_25Q}{}}}
\subsection{Method \code{generate_signature_period_25Q()}}{
Generate the signature period 25 quantiles for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_signature_period_25Q()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_rolling_contract_no_winners"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_rolling_contract_no_winners}{}}}
\subsection{Method \code{generate_rolling_contract_no_winners()}}{
Generate rolling contract number of winners for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_rolling_contract_no_winners()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_rolling_contract_no_issuer"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_rolling_contract_no_issuer}{}}}
\subsection{Method \code{generate_rolling_contract_no_issuer()}}{
Generate rolling contract number of issuers for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_rolling_contract_no_issuer()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_rolling_contract_value_sum_issuer"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_rolling_contract_value_sum_issuer}{}}}
\subsection{Method \code{generate_rolling_contract_value_sum_issuer()}}{
Generate rolling contract value sum of issuers for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_rolling_contract_value_sum_issuer()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_rolling_contract_value_sum_winner"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_rolling_contract_value_sum_winner}{}}}
\subsection{Method \code{generate_rolling_contract_value_sum_winner()}}{
Generate rolling contract value sum of winners for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_rolling_contract_value_sum_winner()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_rolling_contract_value_share_winner"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_rolling_contract_value_share_winner}{}}}
\subsection{Method \code{generate_rolling_contract_value_share_winner()}}{
Generate rolling contract value share of winners for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_rolling_contract_value_share_winner()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_single_bidder"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_single_bidder}{}}}
\subsection{Method \code{generate_single_bidder()}}{
Generate the single bidder flag for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_single_bidder()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_contract_value_share_over_threshold"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_contract_value_share_over_threshold}{}}}
\subsection{Method \code{generate_contract_value_share_over_threshold()}}{
Generate contract value share over threshold for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_contract_value_share_over_threshold()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_all_bids"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_all_bids}{}}}
\subsection{Method \code{generate_all_bids()}}{
Generate the number of all bids for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_all_bids()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-generate_all_bids_trimmed"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-generate_all_bids_trimmed}{}}}
\subsection{Method \code{generate_all_bids_trimmed()}}{
Generate the number of all trimmed bids for the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$generate_all_bids_trimmed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-standardise_country_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-standardise_country_names}{}}}
\subsection{Method \code{standardise_country_names()}}{
Standardise country names in the specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$standardise_country_names(country_columns = c())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{country_columns}}{A vector of column names containing country names to be standardised.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_climatic_column_name"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_climatic_column_name}{}}}
\subsection{Method \code{get_climatic_column_name()}}{
Get the column name for a specified climatic type.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_climatic_column_name(col_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{The climatic type to look for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The column name corresponding to the climatic type, or NULL if not found.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-is_climatic_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-is_climatic_data}{}}}
\subsection{Method \code{is_climatic_data()}}{
Check if the data is defined as climatic.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$is_climatic_data()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE if the data is defined as climatic, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-append_column_attributes"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-append_column_attributes}{}}}
\subsection{Method \code{append_column_attributes()}}{
Append new attributes to a column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$append_column_attributes(col_name, new_attr)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{The name of the column.}

\item{\code{new_attr}}{A named list of new attributes to append.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-display_daily_graph"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-display_daily_graph}{}}}
\subsection{Method \code{display_daily_graph()}}{
Display daily graphs for climatic elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$display_daily_graph(
  data_name,
  date_col = NULL,
  station_col = NULL,
  year_col = NULL,
  doy_col = NULL,
  climatic_element = NULL,
  rug_colour = "red",
  bar_colour = "blue",
  upper_limit = 100
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_name}}{The name of the data set.}

\item{\code{date_col}}{The name of the date column.}

\item{\code{station_col}}{The name of the station column.}

\item{\code{year_col}}{The name of the year column.}

\item{\code{doy_col}}{The name of the day of year column.}

\item{\code{climatic_element}}{The climatic element to plot.}

\item{\code{rug_colour}}{The color of the rug plot.}

\item{\code{bar_colour}}{The color of the bar plot.}

\item{\code{upper_limit}}{The upper limit for the y-axis.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of ggplot objects or a single ggplot object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_variables_metadata_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_variables_metadata_names}{}}}
\subsection{Method \code{get_variables_metadata_names()}}{
Get the names of all metadata variables for specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_variables_metadata_names(columns)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{columns}}{A vector of column names.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A vector of unique metadata variable names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_variables_from_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_variables_from_metadata}{}}}
\subsection{Method \code{get_variables_from_metadata()}}{
Get the names of the variable given a specified metadata.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_variables_from_metadata(property, property_value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{property}}{A character string. The name of the metadata property (column) to filter by.}

\item{\code{property_value}}{A value to match in the selected metadata property.}

\item{\code{data_name}}{A character string. The name of the dataset to look up in the data book.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character vector of variable names where the metadata property equals the specified value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-create_variable_set"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-create_variable_set}{}}}
\subsection{Method \code{create_variable_set()}}{
Create a variable set with a specified name and columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$create_variable_set(set_name, columns)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{set_name}}{The name of the variable set.}

\item{\code{columns}}{A vector of column names to include in the set.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-update_variable_set"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-update_variable_set}{}}}
\subsection{Method \code{update_variable_set()}}{
Update an existing variable set with new columns or rename it.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$update_variable_set(set_name, columns, new_set_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{set_name}}{The name of the existing variable set.}

\item{\code{columns}}{A vector of new column names to include in the set.}

\item{\code{new_set_name}}{An optional new name for the variable set.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-delete_variable_sets"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-delete_variable_sets}{}}}
\subsection{Method \code{delete_variable_sets()}}{
Delete specified variable sets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$delete_variable_sets(set_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{set_names}}{A vector of variable set names to delete.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_variable_sets_names"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_variable_sets_names}{}}}
\subsection{Method \code{get_variable_sets_names()}}{
Get the names of all variable sets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_variable_sets_names(
  include_overall = TRUE,
  include,
  exclude,
  include_empty = FALSE,
  as_list = FALSE,
  excluded_items = c()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{include_overall}}{A logical value indicating whether to include the overall set.}

\item{\code{include}}{A vector of set names to include.}

\item{\code{exclude}}{A vector of set names to exclude.}

\item{\code{include_empty}}{A logical value indicating whether to include empty sets.}

\item{\code{as_list}}{A logical value indicating whether to return the result as a list.}

\item{\code{excluded_items}}{A vector of items to exclude.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A vector or list of variable set names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_variable_sets"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_variable_sets}{}}}
\subsection{Method \code{get_variable_sets()}}{
Get the columns belonging to specified variable sets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_variable_sets(set_names, force_as_list)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{set_names}}{A vector of variable set names.}

\item{\code{force_as_list}}{A logical value indicating whether to force the result as a list.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of column names or a single vector of column names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-patch_climate_element"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-patch_climate_element}{}}}
\subsection{Method \code{patch_climate_element()}}{
Patch daily climatic elements in the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$patch_climate_element(
  date_col_name = "",
  var = "",
  vars = c(),
  max_mean_bias = NA,
  max_stdev_bias = NA,
  column_name,
  station_col_name,
  time_interval = "month"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{date_col_name}}{The name of the date column.}

\item{\code{var}}{The name of the variable to patch.}

\item{\code{vars}}{A vector of variables to use for patching.}

\item{\code{max_mean_bias}}{The maximum mean bias allowed.}

\item{\code{max_stdev_bias}}{The maximum standard deviation bias allowed.}

\item{\code{column_name}}{The name of the column to store the patched values.}

\item{\code{station_col_name}}{The name of the station column.}

\item{\code{time_interval}}{The time interval for patching.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-visualize_element_na"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-visualize_element_na}{}}}
\subsection{Method \code{visualize_element_na()}}{
Visualize missing data for a specified element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$visualize_element_na(
  element_col_name,
  element_col_name_imputed,
  station_col_name,
  x_axis_labels_col_name,
  ncol = 2,
  type = "distribution",
  xlab = NULL,
  ylab = NULL,
  legend = TRUE,
  orientation = "horizontal",
  interval_size = 1461,
  x_with_truth = NULL,
  measure = "percent"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{element_col_name}}{The name of the element column with missing data.}

\item{\code{element_col_name_imputed}}{The name of the element column with imputed data.}

\item{\code{station_col_name}}{The name of the station column.}

\item{\code{x_axis_labels_col_name}}{The name of the column for x-axis labels.}

\item{\code{ncol}}{The number of columns for the plot layout.}

\item{\code{type}}{The type of plot ("distribution", "gapsize", "interval", or "imputation").}

\item{\code{xlab}}{The label for the x-axis.}

\item{\code{ylab}}{The label for the y-axis.}

\item{\code{legend}}{A logical value indicating whether to include a legend.}

\item{\code{orientation}}{The orientation of the plot ("horizontal" or "vertical").}

\item{\code{interval_size}}{The size of the intervals for "interval" type plots.}

\item{\code{x_with_truth}}{The column with true values for comparison.}

\item{\code{measure}}{The measure for "interval" type plots ("percent" or "absolute").}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ggplot object or a list of ggplot objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_data_entry_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_data_entry_data}{}}}
\subsection{Method \code{get_data_entry_data()}}{
Get data entry data for a specified range and type.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_data_entry_data(
  station,
  date,
  elements,
  view_variables,
  station_name,
  type,
  start_date,
  end_date
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{station}}{The name of the station column.}

\item{\code{date}}{The name of the date column.}

\item{\code{elements}}{The names of the element columns.}

\item{\code{view_variables}}{Additional variables to view.}

\item{\code{station_name}}{The name of the station.}

\item{\code{type}}{The type of data ("day", "month", or "range").}

\item{\code{start_date}}{The start date for the range.}

\item{\code{end_date}}{The end date for the range.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data frame containing the specified data.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-save_data_entry_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-save_data_entry_data}{}}}
\subsection{Method \code{save_data_entry_data()}}{
Save data entry data after making changes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$save_data_entry_data(new_data, rows_changed, add_flags = FALSE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_data}}{The new data to save.}

\item{\code{rows_changed}}{The rows that have changed.}

\item{\code{add_flags}}{A logical value indicating whether to add flag fields.}

\item{\code{...}}{Additional arguments.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_flag_fields"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_flag_fields}{}}}
\subsection{Method \code{add_flag_fields()}}{
Add flag fields to specified columns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_flag_fields(col_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{A vector of column names to add flag fields to.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-remove_empty"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-remove_empty}{}}}
\subsection{Method \code{remove_empty()}}{
Remove empty rows or columns from the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$remove_empty(which = c("rows", "cols"))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{which}}{A character vector indicating whether to remove empty "rows", "cols", or both.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-replace_values_with_NA"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-replace_values_with_NA}{}}}
\subsection{Method \code{replace_values_with_NA()}}{
Replace values with NA at specified row and column indices.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$replace_values_with_NA(row_index, column_index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{row_index}}{A vector of row indices.}

\item{\code{column_index}}{A vector of column indices.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_options_by_context_types"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_options_by_context_types}{}}}
\subsection{Method \code{set_options_by_context_types()}}{
Set options by context types for the current data sheet.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_options_by_context_types(obyc_types = NULL, key_columns = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{obyc_types}}{A named list of options by context types.}

\item{\code{key_columns}}{A vector of key columns relevant to the data sheet.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-has_labels"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-has_labels}{}}}
\subsection{Method \code{has_labels()}}{
Check if specified columns have labels.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$has_labels(col_names)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_names}}{A vector of column names.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A logical vector indicating if each column has labels.
Add a Comment to Data Sheet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-add_comment"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-add_comment}{}}}
\subsection{Method \code{add_comment()}}{
Adds a new \code{instat_comment} object to the data sheet if the key is defined and valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$add_comment(new_comment)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_comment}}{An \code{instat_comment} object to be added to the data sheet.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This function first checks if a key is defined and valid for the data sheet.
It also verifies that \code{new_comment} is an \code{instat_comment} object and that the key columns in \code{new_comment} are valid keys in the data frame.
If the comment ID already exists, a warning is issued and the existing comment is replaced.
}

\subsection{Returns}{
None. This function modifies the data sheet by adding or replacing a comment.
Delete a Comment from Data Sheet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-delete_comment"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-delete_comment}{}}}
\subsection{Method \code{delete_comment()}}{
Deletes a comment from the data sheet based on the comment ID.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$delete_comment(comment_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{comment_id}}{A character string representing the ID of the comment to be deleted.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
If the specified comment ID does not exist in the data sheet, an error is thrown.
}

\subsection{Returns}{
None. This function modifies the data sheet by removing the specified comment.
Get All Comment IDs
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_comment_ids"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_comment_ids}{}}}
\subsection{Method \code{get_comment_ids()}}{
Retrieves all comment IDs currently stored in the data sheet.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_comment_ids()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A character vector containing the IDs of all comments in the data sheet.
Get Comments as Data Frame
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_comments_as_data_frame"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_comments_as_data_frame}{}}}
\subsection{Method \code{get_comments_as_data_frame()}}{
Converts all comments in the data sheet to a data frame format for easier inspection and analysis.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_comments_as_data_frame()}\if{html}{\out{</div>}}
}

\subsection{Details}{
This function collects various fields from each comment and returns them in a data frame.
The number of replies and attributes for each comment is also included.
Currently, nested comments (replies) and additional attributes are not displayed in detail.
}

\subsection{Returns}{
A data frame with columns representing comment ID, key values, column, value, type, comment text, label, calculation, timestamp, number of replies, resolved status, active status, and number of attributes.
Save a Calculation to the DataSheet
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-save_calculation"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-save_calculation}{}}}
\subsection{Method \code{save_calculation()}}{
This method adds or updates a calculation in the \code{DataSheet} object. If a calculation
with the same name already exists, it will be replaced, with a warning issued to the user.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$save_calculation(calc)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calc}}{A list or object representing the calculation to be saved. This object must
contain a \code{name} field. If the \code{name} field is empty, a default name will be
generated using the \code{instatExtras::next_default_item()} function.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\itemize{
\item If the \code{calc$name} field is empty, a default name is generated using the
\code{instatExtras::next_default_item()} function, based on the prefix "calc" and the existing
calculation names in the \code{private$calculations} environment.
\item If a calculation with the same name already exists in \code{private$calculations}, it
will be replaced, and a warning will be issued to inform the user.
\item The calculation is saved in the \code{private$calculations} list, keyed by its \code{name}.
}
}

\subsection{Returns}{
The name of the saved calculation (a character string).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-merge_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-merge_data}{}}}
\subsection{Method \code{merge_data()}}{
This method merges a new data frame with the existing data in the \code{DataSheet} object.
It supports multiple types of joins (left, right, inner, full) and ensures that the
data types of the columns used for merging are aligned.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$merge_data(new_data, by = NULL, type = "left", match = "all")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_data}}{A data frame containing the new data to merge with the existing data.}

\item{\code{by}}{A character vector specifying the columns to join by. If \code{NULL}, the function
will attempt to join by all columns with matching names.}

\item{\code{type}}{A string specifying the type of join. Options are:
- \code{"left"}: Keeps all rows from the existing data.
- \code{"right"}: Keeps all rows from the new data.
- \code{"full"}: Keeps all rows from both data frames.
- \code{"inner"}: Keeps only rows that match in both data frames.}

\item{\code{match}}{Reserved for future use. Currently not implemented.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\itemize{
\item The method ensures that the data types of the columns specified in \code{by} are aligned
(e.g., converting factors to numeric if necessary).
\item Metadata from the original data is preserved and updated after the merge.
\item Column attributes for the \code{by} columns are restored after the merge.
Calculate Summaries for Specified Columns
}
}

\subsection{Returns}{
None. The merged data is stored internally in the \code{DataSheet} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-calculate_summary"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-calculate_summary}{}}}
\subsection{Method \code{calculate_summary()}}{
This method computes summary statistics for specified columns in the data,
grouping by optional factors. It supports multiple summary functions (e.g., mean, sum)
and can handle missing values through the \code{na.rm} parameter.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$calculate_summary(calc, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{calc}}{A calculation object containing parameters for the summary. The object
should include:
- \code{columns_to_summarise}: Columns to compute the summaries for.
- \code{summaries}: Functions to apply (e.g., \code{"mean"}, \code{"sum"}).
- \code{factors}: Grouping factors for the summaries.
- \code{drop}: Whether to drop unused factor levels. Default is \code{FALSE}.
- \code{add_cols}: Additional columns to include in the output.
- \code{na.rm}: Logical, whether to remove missing values in the summaries. Default is \code{FALSE}.
- \code{filters}: Filters to apply before performing the summaries.}

\item{\code{...}}{Additional arguments to pass to the summary functions.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\itemize{
\item The method applies the specified summaries to the columns provided in \code{columns_to_summarise},
grouping by \code{factors}.
\item Filters can be applied to restrict the data before calculating summaries.
\item Multiple summaries and columns can be computed in a single call.
}
}

\subsection{Returns}{
A data frame containing the computed summaries. The output includes the grouping
factors and the computed summary statistics.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_climatic_type"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_climatic_type}{}}}
\subsection{Method \code{get_column_climatic_type()}}{
Retrieve the climatic type attribute for a specific column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_climatic_type(col_name, attr_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the column to retrieve the attribute for.}

\item{\code{attr_name}}{Character, the name of the attribute to retrieve.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The value of the specified attribute, or NULL if not available.
Update Column Selection

This function updates the conditions of a specified column selection with new values.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-update_selection"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-update_selection}{}}}
\subsection{Method \code{update_selection()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$update_selection(new_values, column_selection_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_values}}{A vector of new values to update the column selection with.}

\item{\code{column_selection_name}}{A character string specifying the name of the column selection to update.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No explicit return value. The function updates the column selection object in place.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-anova_tables2"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-anova_tables2}{}}}
\subsection{Method \code{anova_tables2()}}{
Generate an ANOVA table for specified predictor and response variables.
Optionally includes totals, significance levels, and means.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$anova_tables2(
  x_col_names,
  y_col_name,
  total = FALSE,
  signif.stars = FALSE,
  sign_level = FALSE,
  means = FALSE,
  interaction = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x_col_names}}{Character vector, the names of predictor variables.}

\item{\code{y_col_name}}{Character, the name of the response variable.}

\item{\code{total}}{Logical, whether to include a total row in the ANOVA table. Defaults to FALSE.}

\item{\code{signif.stars}}{Logical, whether to include significance stars. Defaults to FALSE.}

\item{\code{sign_level}}{Logical, whether to display significance levels. Defaults to FALSE.}

\item{\code{means}}{Logical, whether to include means or model coefficients. Defaults to FALSE.}

\item{\code{interaction}}{Logical, whether to include interaction terms for predictors. Defaults to FALSE.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A formatted ANOVA table with optional additional sections.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-set_tricot_types"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-set_tricot_types}{}}}
\subsection{Method \code{set_tricot_types()}}{
Set the tricot types for columns in the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$set_tricot_types(types)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{types}}{Named character vector, a named vector where names are tricot types and values are the corresponding column names in the dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_tricot_column_name"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_tricot_column_name}{}}}
\subsection{Method \code{get_tricot_column_name()}}{
Get the column name for a specified tricot type.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_tricot_column_name(col_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{The tricot type to look for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The column name corresponding to the tricot type, or NULL if not found.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-is_tricot_data"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-is_tricot_data}{}}}
\subsection{Method \code{is_tricot_data()}}{
Check if the data is defined as tricot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$is_tricot_data()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
TRUE if the data is defined as tricot, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-get_column_tricot_type"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-get_column_tricot_type}{}}}
\subsection{Method \code{get_column_tricot_type()}}{
Retrieve the tricot type attribute for a specific column.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$get_column_tricot_type(col_name, attr_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{col_name}}{Character, the name of the column to retrieve the attribute for.}

\item{\code{attr_name}}{Character, the name of the attribute to retrieve.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The value of the specified attribute, or NULL if not available.
Display Daily Summary Table
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-display_daily_table"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-display_daily_table}{}}}
\subsection{Method \code{display_daily_table()}}{
Display a daily summary table for a specified climatic data element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$display_daily_table(
  data_name,
  climatic_element,
  date_col = date_col,
  year_col = year_col,
  station_col = station_col,
  Misscode,
  Tracecode,
  Zerocode,
  monstats = c("min", "mean", "median", "max", "IQR", "sum")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data_name}}{A character string representing the name of the dataset.}

\item{\code{climatic_element}}{A vector specifying the climatic elements to be displayed (e.g., temperature, rainfall).}

\item{\code{date_col}}{The name of the column containing date information. Default is \code{date_col}.}

\item{\code{year_col}}{The name of the column containing year information. Default is \code{year_col}.}

\item{\code{station_col}}{The name of the column containing station information. If missing, assigns the \code{Station} column from metadata.}

\item{\code{Misscode}}{A value representing missing data in the dataset.}

\item{\code{Tracecode}}{A value representing trace amounts of the climatic element.}

\item{\code{Zerocode}}{A value representing zero values for the climatic element.}

\item{\code{monstats}}{A vector of summary statistics to calculate for monthly data. Options include \code{"min"}, \code{"mean"}, \code{"median"}, \code{"max"}, \code{"IQR"}, and \code{"sum"}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This function retrieves the data frame associated with the specified dataset and renames columns to standardise \code{Date}, \code{Year}, and \code{Station} for ease of processing. It then displays a daily summary table using the specified climatic elements, handling missing codes, trace codes, and zero codes as defined. Monthly statistics are calculated based on the \code{monstats} argument.
}

\subsection{Returns}{
A data frame displaying the daily summary table for the specified climatic element.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DataSheet-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DataSheet-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataSheet$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
